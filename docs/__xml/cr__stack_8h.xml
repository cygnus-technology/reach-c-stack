<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="cr__stack_8h" kind="file" language="C++">
    <compoundname>cr_stack.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="yes">reach-server.h</includes>
    <includes refid="crcb__weak_8h" local="yes">crcb_weak.h</includes>
    <includes local="yes">reach.pb.h</includes>
    <includes refid="reach__ble__proto__sizes_8h" local="yes">reach_ble_proto_sizes.h</includes>
    <includedby refid="cr__files_8c" local="yes">cr_files.c</includedby>
    <includedby refid="cr__private_8h" local="yes">cr_private.h</includedby>
    <includedby refid="cr__stack_8c" local="yes">cr_stack.c</includedby>
    <includedby refid="cr__weak_8c" local="yes">cr_weak.c</includedby>
    <includedby refid="crcb__weak_8h" local="yes">crcb_weak.h</includedby>
    <incdepgraph>
      <node id="8">
        <label>i3_error.h</label>
        <link refid="i3__error_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>i3_log.h</label>
        <link refid="i3__log_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>text_colors.h</label>
        <link refid="text__colors_8h_source"/>
      </node>
      <node id="1">
        <label>cr_stack.h</label>
        <link refid="cr__stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>crcb_weak.h</label>
        <link refid="crcb__weak_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>reach_ble_proto_sizes.h</label>
        <link refid="reach__ble__proto__sizes_8h"/>
      </node>
      <node id="5">
        <label>reach-server.h</label>
      </node>
      <node id="12">
        <label>reach.pb.h</label>
      </node>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="10">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>cr_files.c</label>
        <link refid="cr__files_8c"/>
      </node>
      <node id="3">
        <label>cr_private.h</label>
        <link refid="cr__private_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cr_stack.c</label>
        <link refid="cr__stack_8c"/>
      </node>
      <node id="1">
        <label>cr_stack.h</label>
        <link refid="cr__stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cr_weak.c</label>
        <link refid="cr__weak_8c"/>
      </node>
      <node id="6">
        <label>crcb_weak.h</label>
        <link refid="crcb__weak_8h_source"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structreach__sizes__t" prot="public">reach_sizes_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="cr__stack_8h_1a2cad5cbd47a3b5129f0d77b50531b774" prot="public" static="no">
        <name>MAX_NUM_PARAM_ID</name>
        <initializer>32767</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="100" column="9" bodyfile="cr_stack.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cr__stack_8h_1a3a25a0d69b8381ca15bf278ffa888471" prot="public" static="no">
        <name>ALIGN_TO_WORD</name>
        <initializer><ref refid="cr__weak_8c_1aeb0fee7e25692380f5346f304f4b6e5a" kindref="member">__attribute__</ref>((aligned(4)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="121" column="9" bodyfile="cr_stack.h" bodystart="121" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="cr__stack_8h_1aa30199827c6ac809190a2494b2a66a13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cr_init</definition>
        <argsstring>()</argsstring>
        <name>cr_init</name>
        <briefdescription>
<para>cr_init </para>
        </briefdescription>
        <detaileddescription>
<para>To be called before starting the stack. <simplesect kind="note"><para>Not much happens here yet. </para>
</simplesect>
<simplesect kind="return"><para>cr_ErrorCodes_NO_ERROR or a non-zero error like cr_ErrorCodes_. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="125" column="5" bodyfile="cr_stack.c" bodystart="322" bodyend="339" declfile="cr_stack.h" declline="125" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cr__stack_8h_1a16d910a820e7f9337216cd623d55e66f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cr_set_advertised_name</definition>
        <argsstring>(char *name, int length)</argsstring>
        <name>cr_set_advertised_name</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>cr_set_advertised_name </para>
        </briefdescription>
        <detaileddescription>
<para>Sets the name of the device that should be advertised before connecting. Used in BLE. The length of the string is set by APP_ADVERTISED_NAME_LENGTH which can be define in the application. See reach-server.h. Uses REACH_SHORT_STRING_LEN when APP_ADVERTISED_NAME_LENGTH is not defined. The code setting up the communication link can retrieve this using <ref refid="cr__stack_8c_1a0455e201acdd200cfad17c663073a491" kindref="member">cr_get_advertised_name()</ref>. <simplesect kind="return"><para>cr_ErrorCodes_NO_ERROR or a non-zero error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="129" column="5" bodyfile="cr_stack.c" bodystart="358" bodyend="364" declfile="cr_stack.h" declline="129" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cr__stack_8h_1a0455e201acdd200cfad17c663073a491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * cr_get_advertised_name</definition>
        <argsstring>()</argsstring>
        <name>cr_get_advertised_name</name>
        <briefdescription>
<para>cr_get_advertised_name </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the name stored by <ref refid="cr__stack_8c_1a16d910a820e7f9337216cd623d55e66f" kindref="member">cr_set_advertised_name()</ref>. <simplesect kind="return"><para>pointer to a string of length REACH_SHORT_STRING_LEN. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="132" column="12" bodyfile="cr_stack.c" bodystart="371" bodyend="374" declfile="cr_stack.h" declline="132" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="cr__stack_8h_1ad28b6060e7d1c0641b0a6571995f656d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cr_process</definition>
        <argsstring>(uint32_t ticks)</argsstring>
        <name>cr_process</name>
        <param>
          <type>uint32_t</type>
          <declname>ticks</declname>
        </param>
        <briefdescription>
<para>cr_process </para>
        </briefdescription>
        <detaileddescription>
<para>The application must call <ref refid="cr__stack_8c_1ad28b6060e7d1c0641b0a6571995f656d" kindref="member">cr_process()</ref> regularly as it does most of the work required of Reach. The ticks parameter is expected to be a monotonically increasing value representing the time since the system started. This allows it to perform timing related tasks such as notifications. <ref refid="cr__stack_8c_1ad28b6060e7d1c0641b0a6571995f656d" kindref="member">cr_process()</ref> returns immediately if the device is not connected to BLE. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ticks</parametername>
</parameternamelist>
<parameterdescription>
<para>A measure of time passed, typically milliseconds, but the units are not specified. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cr_ErrorCodes_NO_ERROR or a non-zero error code, however these are indicative only. The non-zero returns indicate normal conditions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="138" column="5" bodyfile="cr_stack.c" bodystart="431" bodyend="516" declfile="cr_stack.h" declline="138" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cr__stack_8h_1af1732a5d9ee5f83c4360448ae4452b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cr_store_coded_prompt</definition>
        <argsstring>(uint8_t *data, size_t len)</argsstring>
        <name>cr_store_coded_prompt</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>cr_store_coded_prompt </para>
        </briefdescription>
        <detaileddescription>
<para>allows the application to store the prompt where the Reach stack can see it. The byte data and length are copied into private storage. This data is retrieved using crcb_get_coded_prompt(). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The coded prompt to be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>: number of bytes to be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cr_ErrorCodes_NO_ERROR or a non-zero error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="141" column="5" bodyfile="cr_stack.c" bodystart="385" bodyend="392" declfile="cr_stack.h" declline="141" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cr__stack_8h_1ab475ae83a3ac8917b289852d0a0aa6ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cr_get_coded_response_buffer</definition>
        <argsstring>(uint8_t **pResponse, size_t *len)</argsstring>
        <name>cr_get_coded_response_buffer</name>
        <param>
          <type>uint8_t **</type>
          <declname>pResponse</declname>
          <defname>ppResponse</defname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>len</declname>
          <defname>pLen</defname>
        </param>
        <briefdescription>
<para>cr_get_coded_response_buffer </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the adress of the &quot;coded response buffer&quot;. This buffer contains the response to a prompt, coded according to protobuf specs, to be transmitted to the client. The stored coded length is zeroed by this call. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ppResponse</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to pointer to bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pLen</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to the number of bytes for transmission. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cr_ErrorCodes_NO_ERROR or a non-zero error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="143" column="5" bodyfile="cr_stack.c" bodystart="404" bodyend="412" declfile="cr_stack.h" declline="143" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cr__stack_8h_1ae7166504541451a189a7b1e30d3118f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cr_provide_debug_buffer</definition>
        <argsstring>(char *buf, size_t len)</argsstring>
        <name>cr_provide_debug_buffer</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="146" column="6" declfile="cr_stack.h" declline="146" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cr__stack_8h_1ad454aec65a19531cefb2ed921c2d6b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cr_get_reply_buffer_and_size</definition>
        <argsstring>(char **ptr, size_t *sz)</argsstring>
        <name>cr_get_reply_buffer_and_size</name>
        <param>
          <type>char **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="148" column="6" declfile="cr_stack.h" declline="148" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cr__stack_8h_1a516393a2f8a30416f04285bf3dbcd010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cr_report_error</definition>
        <argsstring>(int error_code, const char *fmt,...)</argsstring>
        <name>cr_report_error</name>
        <param>
          <type>int</type>
          <declname>error_code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>cr_report_error </para>
        </briefdescription>
        <detaileddescription>
<para>Report an error condition to the client. This can be called at any point as the report to the client is asynchronous and immediate. The stack can be configured to use only the error code, but the printf-like string describing the error condition is encouraged. This is intended to make it easier to find and eliminate errors during development. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error_code</parametername>
</parameternamelist>
<parameterdescription>
<para>: Use of the cr_ErrorCodes_ enum is encouraged but not required. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>: A printf-like string with variables. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="151" column="6" bodyfile="cr_stack.c" bodystart="583" bodyend="624" declfile="cr_stack.h" declline="151" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cr__stack_8h_1ad1095632068473688fc3208985c1d01b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cr_set_comm_link_connected</definition>
        <argsstring>(bool connected)</argsstring>
        <name>cr_set_comm_link_connected</name>
        <param>
          <type>bool</type>
          <declname>connected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="153" column="6" bodyfile="cr_stack.c" bodystart="542" bodyend="559" declfile="cr_stack.h" declline="153" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cr__stack_8h_1a9c0aef7d4122da3699fab4a72a802832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cr_get_comm_link_connected</definition>
        <argsstring>(void)</argsstring>
        <name>cr_get_comm_link_connected</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>cr_get_comm_link_connected </para>
        </briefdescription>
        <detaileddescription>
<para>Returns what was set using cr_set_comm_link_connected(). <simplesect kind="return"><para>true if the communication link is connected. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="154" column="6" bodyfile="cr_stack.c" bodystart="566" bodyend="569" declfile="cr_stack.h" declline="154" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cr__stack_8h_1ac3be80269e1e885655edb9f3bdea2e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t cr_get_current_ticks</definition>
        <argsstring>()</argsstring>
        <name>cr_get_current_ticks</name>
        <briefdescription>
<para>cr_get_current_ticks </para>
        </briefdescription>
        <detaileddescription>
<para>The tick count is passed in to <ref refid="cr__stack_8c_1ad28b6060e7d1c0641b0a6571995f656d" kindref="member">cr_process()</ref>. This function gives other Reach functions access to that value. <simplesect kind="return"><para>The same tick count passed into <ref refid="cr__stack_8c_1ad28b6060e7d1c0641b0a6571995f656d" kindref="member">cr_process()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="156" column="10" bodyfile="cr_stack.c" bodystart="525" bodyend="529" declfile="cr_stack.h" declline="156" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cr__stack_8h_1a16ccedefa64bb122fda0990567e8499c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cr_test_sizes</definition>
        <argsstring>()</argsstring>
        <name>cr_test_sizes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="158" column="6" bodyfile="cr_stack.c" bodystart="681" bodyend="756" declfile="cr_stack.h" declline="158" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cr__stack_8h_1ac4de55cd1a8df4e01f0dbc1fb788284f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * cr_get_reach_version</definition>
        <argsstring>()</argsstring>
        <name>cr_get_reach_version</name>
        <briefdescription>
<para>cr_get_reach_version </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the version of the Reach C stack. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cr_stack.h" line="207" column="12" bodyfile="cr_stack.c" bodystart="1027" bodyend="1030" declfile="cr_stack.h" declline="207" declcolumn="12"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>This file exposes the core of the public Reach stack API. It depends on reach-server.h which defines what parts of the stack are being used by an applicaiton. <ref refid="crcb__weak_8h_source" kindref="compound">crcb_weak.h</ref> is incluced. That is the part of the API that must be implemented by a server application. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Chuck Peplinski </para>
</simplesect>
<simplesect kind="date"><para>2024-01-24 </para>
</simplesect>
<simplesect kind="copyright"><para>(c) Copyright 2023 i3 Product Development. All Rights Reserved. The Cygngus Reach firmware stack is shared under an MIT license. </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023-2024<sp/>i3<sp/>Product<sp/>Development</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/********************************************************************************************</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>_<sp/>____<sp/><sp/>___<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/>___<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(_)__<sp/>/<sp/>|<sp/>_<sp/>\_<sp/>_<sp/>___<sp/><sp/>__|<sp/>|_<sp/><sp/>_<sp/>__|<sp/>|_<sp/><sp/>|<sp/><sp/><sp/>\<sp/>_____<sp/>_____|<sp/>|___<sp/>_<sp/>__<sp/>_<sp/>__<sp/><sp/>___<sp/>_<sp/>_|<sp/>|_</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/>|<sp/>||_<sp/>\<sp/>|<sp/><sp/>_/<sp/>&apos;_/<sp/>_<sp/>\/<sp/>_`<sp/>|<sp/>||<sp/>/<sp/>_|<sp/><sp/>_|<sp/>|<sp/>|)<sp/>/<sp/>-_)<sp/>V<sp/>/<sp/>-_)<sp/>/<sp/>_<sp/>\<sp/>&apos;_<sp/>\<sp/>&apos;<sp/><sp/>\/<sp/>-_)<sp/>&apos;<sp/>\<sp/><sp/>_|</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/>|_|___/<sp/>|_|<sp/>|_|<sp/>\___/\__,_|\_,_\__|\__|<sp/>|___/\___|\_/\___|_\___/<sp/>.__/_|_|_\___|_||_\__|</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|_|</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-----------------------------------</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>i3<sp/>Product<sp/>Development<sp/>2023</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>\brief<sp/>&quot;cr_stack.h&quot;<sp/>defines<sp/>the<sp/>API<sp/>to<sp/>the<sp/>Cygnus<sp/>Reach<sp/>device<sp/>stack</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>Original<sp/>Author:<sp/>Chuck.Peplinski</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>********************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_CR_STACK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CR_STACK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reach-server.h<sp/>defines<sp/>the<sp/>build<sp/>configuration<sp/>of<sp/>the<sp/>Reach<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>includes<sp/>which<sp/>services,<sp/>and<sp/>the<sp/>basic<sp/>size<sp/>of<sp/>structures<sp/>appropriate<sp/>for<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>transport<sp/>means.<sp/><sp/>For<sp/>example,<sp/>BLE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;reach-server.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;crcb_weak.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reach.pb.h<sp/>is<sp/>generated<sp/>by<sp/>nanopb<sp/>based<sp/>on<sp/>the<sp/>protobuf<sp/>file<sp/>reach.proto.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;reach.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reach__ble__proto__sizes_8h" kindref="compound">reach_ble_proto_sizes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conventions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Naming<sp/>convention:<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>cr_<sp/>prefix<sp/>(for<sp/>Cygnus<sp/>Reach),<sp/>then<sp/>service<sp/>name,<sp/>then<sp/>verb.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>crcb_<sp/>prefix<sp/>for<sp/>the<sp/>&quot;weak&quot;<sp/>callback<sp/>functions<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>API<sp/>functions<sp/>return<sp/>zero<sp/>on<sp/>success<sp/>or<sp/>an<sp/>identifiable<sp/>error<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>a<sp/>small<sp/>number<sp/>of<sp/>API<sp/>functions<sp/>that<sp/>are<sp/>to<sp/>be<sp/>called<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>hosting<sp/>application.<sp/><sp/>Most<sp/>of<sp/>the<sp/>functions<sp/>in<sp/>the<sp/>API<sp/>are<sp/>to<sp/>be<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>provided<sp/>by<sp/>the<sp/>application.<sp/><sp/>The<sp/>reach<sp/>stack<sp/>provides<sp/>&quot;weak&quot;<sp/>declared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>versions<sp/>so<sp/>the<sp/>application<sp/>provide<sp/>only<sp/>what<sp/>is<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>stack<sp/>can<sp/>be<sp/>built<sp/>to<sp/>report<sp/>errors<sp/>if<sp/>required<sp/>weak<sp/>functions<sp/>are<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>not<sp/>overridden.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>configuration<sp/>structures<sp/>that<sp/>must<sp/>be<sp/>passed<sp/>in<sp/>to<sp/>the<sp/>stack<sp/>to<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>describe<sp/><sp/>the<sp/>system<sp/>are<sp/>designed<sp/>to<sp/>be<sp/>constant<sp/>and<sp/>stored<sp/>in<sp/>flash<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>application<sp/>desires.<sp/><sp/>This<sp/>allows<sp/>for<sp/>a<sp/>minimum<sp/>use<sp/>of<sp/>RAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Lists<sp/>of<sp/>items<sp/>such<sp/>as<sp/>parameters,<sp/>command,<sp/>files,<sp/>etc<sp/>are<sp/>handled<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>iterator<sp/>pattern.<sp/><sp/>A<sp/>function<sp/>gets<sp/>the<sp/>next<sp/>item<sp/>and<sp/>a<sp/>reset<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>all<sp/>cases,<sp/>resetting<sp/>to<sp/>zero<sp/>will<sp/>select<sp/>the<sp/>lowest<sp/>available<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_NUM_PARAM_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32767<sp/></highlight><highlight class="comment">//<sp/>16<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Error<sp/>codes<sp/>are<sp/>defined<sp/>in<sp/>the<sp/>proto<sp/>file<sp/>so<sp/>that<sp/>the<sp/>client<sp/>can<sp/>see<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="109"><highlight class="comment">//----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="110"><highlight class="comment">//<sp/>static<sp/>buffers<sp/>used<sp/>and<sp/>reused<sp/>by<sp/>the<sp/>reach<sp/>stack.</highlight></codeline>
<codeline lineno="111"><highlight class="comment">//----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="112"><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">//<sp/>Terminology</highlight></codeline>
<codeline lineno="114"><highlight class="comment">//<sp/><sp/><sp/>A<sp/>transaction<sp/>is<sp/>a<sp/>series<sp/>of<sp/>messages.</highlight></codeline>
<codeline lineno="115"><highlight class="comment">//<sp/><sp/><sp/>A<sp/>message<sp/>has<sp/>a<sp/>header<sp/>and<sp/>a<sp/>payload.</highlight></codeline>
<codeline lineno="116"><highlight class="comment">//<sp/><sp/><sp/>The<sp/>prompt<sp/>is<sp/>a<sp/>received<sp/>payload.</highlight></codeline>
<codeline lineno="117"><highlight class="comment">//<sp/><sp/><sp/>The<sp/>response<sp/>is<sp/>a<sp/>generated<sp/>payload.</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIGN_TO_WORD<sp/><sp/><sp/>__attribute__((aligned(4)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>be<sp/>called<sp/>once<sp/>before<sp/>cr_process<sp/>is<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cr__stack_8h_1aa30199827c6ac809190a2494b2a66a13" kindref="member">cr_init</ref>();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>application<sp/>should<sp/>set<sp/>the<sp/>name<sp/>of<sp/>the<sp/>device<sp/>to<sp/>be<sp/>advertised.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>length<sp/>exceeds<sp/>the<sp/>maximum,<sp/>the<sp/>max<sp/>length<sp/>will<sp/>be<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cr__stack_8h_1a16d910a820e7f9337216cd623d55e66f" kindref="member">cr_set_advertised_name</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>used<sp/>by<sp/>the<sp/>transport<sp/>code<sp/>to<sp/>get<sp/>the<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="cr__stack_8h_1a0455e201acdd200cfad17c663073a491" kindref="member">cr_get_advertised_name</ref>();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>application<sp/>must<sp/>call<sp/>cr_process()<sp/>regularly.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ticks<sp/>tells<sp/>it<sp/>approximately<sp/>how<sp/>many<sp/><sp/>milliseconds<sp/>have<sp/>passed<sp/>since<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>system<sp/>started.<sp/><sp/>This<sp/>allows<sp/>it<sp/>to<sp/>perform<sp/>timing<sp/>related<sp/>tasks.<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Most<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cr__stack_8h_1ad28b6060e7d1c0641b0a6571995f656d" kindref="member">cr_process</ref>(uint32_t<sp/>ticks);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allows<sp/>the<sp/>app<sp/>to<sp/>store<sp/>the<sp/>coded<sp/>prompt<sp/>in<sp/>the<sp/>memory<sp/>held<sp/>by<sp/>the<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cr__stack_8h_1af1732a5d9ee5f83c4360448ae4452b34" kindref="member">cr_store_coded_prompt</ref>(uint8_t<sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cr__stack_8h_1ab475ae83a3ac8917b289852d0a0aa6ec" kindref="member">cr_get_coded_response_buffer</ref>(uint8_t<sp/>**pResponse,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*len);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>can<sp/>get<sp/>more<sp/>useful<sp/>error<sp/>reports<sp/>if<sp/>you<sp/>provide<sp/>~128<sp/>bytes<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cr_provide_debug_buffer(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cr_get_reply_buffer_and_size(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*sz);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>error<sp/>handling<sp/>is<sp/>always<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cr__stack_8h_1a516393a2f8a30416f04285bf3dbcd010" kindref="member">cr_report_error</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cr_set_comm_link_connected(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>connected);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="cr__stack_8h_1a9c0aef7d4122da3699fab4a72a802832" kindref="member">cr_get_comm_link_connected</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">uint32_t<sp/><ref refid="cr__stack_8h_1ac3be80269e1e885655edb9f3bdea2e96" kindref="member">cr_get_current_ticks</ref>();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cr_test_sizes();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="structreach__sizes__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="169" refid="structreach__sizes__t_1a013f4c2684eed7afb7baf1c5c1817652" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><ref refid="structreach__sizes__t_1a013f4c2684eed7afb7baf1c5c1817652" kindref="member">max_message_size</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="170" refid="structreach__sizes__t_1af8c20cb7120588cb41750315c1a1edcd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><ref refid="structreach__sizes__t_1af8c20cb7120588cb41750315c1a1edcd" kindref="member">big_data_buffer_size</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174" refid="structreach__sizes__t_1a22e04304fa71af1fbc8d3889a002dc73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><ref refid="structreach__sizes__t_1a22e04304fa71af1fbc8d3889a002dc73" kindref="member">parameter_buffer_count</ref>;</highlight></codeline>
<codeline lineno="177" refid="structreach__sizes__t_1a0a18c41b8076b1dcb7de16803646411b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><ref refid="structreach__sizes__t_1a0a18c41b8076b1dcb7de16803646411b" kindref="member">num_params_in_response</ref>;</highlight></codeline>
<codeline lineno="180" refid="structreach__sizes__t_1a46cc78459cad7d414cdc21d03011dff0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><ref refid="structreach__sizes__t_1a46cc78459cad7d414cdc21d03011dff0" kindref="member">device_description_len</ref>;</highlight></codeline>
<codeline lineno="183" refid="structreach__sizes__t_1a41af873809467792eeabed2e659836e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><ref refid="structreach__sizes__t_1a41af873809467792eeabed2e659836e5" kindref="member">max_param_bytes</ref>;</highlight></codeline>
<codeline lineno="185" refid="structreach__sizes__t_1abed5d5466ab8fb72111fe7800d5aaeb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><ref refid="structreach__sizes__t_1abed5d5466ab8fb72111fe7800d5aaeb6" kindref="member">param_info_description_len</ref>;</highlight></codeline>
<codeline lineno="187" refid="structreach__sizes__t_1a2ea2b0edc1726c7c36c0c356652ce7dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><ref refid="structreach__sizes__t_1a2ea2b0edc1726c7c36c0c356652ce7dd" kindref="member">medium_string_len</ref>;</highlight></codeline>
<codeline lineno="189" refid="structreach__sizes__t_1a79985c847ea324e6a36e68d4976c28d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><ref refid="structreach__sizes__t_1a79985c847ea324e6a36e68d4976c28d5" kindref="member">short_string_len</ref>;</highlight></codeline>
<codeline lineno="191" refid="structreach__sizes__t_1a852892ee02d36c06d9256b4cd08ce053" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><ref refid="structreach__sizes__t_1a852892ee02d36c06d9256b4cd08ce053" kindref="member">param_info_enum_count</ref>;</highlight></codeline>
<codeline lineno="193" refid="structreach__sizes__t_1a8dedad960bf7bce0624b3c50a8af1827" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><ref refid="structreach__sizes__t_1a8dedad960bf7bce0624b3c50a8af1827" kindref="member">num_descriptors_in_response</ref>;</highlight></codeline>
<codeline lineno="195" refid="structreach__sizes__t_1ae82dd9688db31f7d0249fe5ab4da9e25" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><ref refid="structreach__sizes__t_1ae82dd9688db31f7d0249fe5ab4da9e25" kindref="member">num_param_notifications</ref>;</highlight></codeline>
<codeline lineno="197" refid="structreach__sizes__t_1ae35f9bfe3573750958693ff55f2e6871" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><ref refid="structreach__sizes__t_1ae35f9bfe3573750958693ff55f2e6871" kindref="member">num_commands_in_response</ref>;</highlight></codeline>
<codeline lineno="200" refid="structreach__sizes__t_1a78e712a63bd7b8a2ac632405b13fe16f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><ref refid="structreach__sizes__t_1a78e712a63bd7b8a2ac632405b13fe16f" kindref="member">num_param_desc_in_response</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}<sp/><ref refid="structreach__sizes__t" kindref="compound">reach_sizes_t</ref>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>size<sp/>of<sp/>this<sp/>structure<sp/>(REACH_SIZE_STRUCT_SIZE)<sp/>must<sp/>be<sp/>defined<sp/>in<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reach_ble_proto_sizes.h,<sp/>or<sp/>the<sp/>analogous<sp/>file<sp/>used<sp/>to<sp/>set<sp/>structure<sp/>sizes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>REACH_SIZE_STRUCT_SIZE<sp/><sp/><sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="cr__stack_8h_1ac4de55cd1a8df4e01f0dbc1fb788284f" kindref="member">cr_get_reach_version</ref>();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>ndef<sp/>_CR_STACK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="cr_stack.h"/>
  </compounddef>
</doxygen>
