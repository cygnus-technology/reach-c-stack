/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_CR_REACH_PB_H_INCLUDED
#define PB_CR_REACH_PB_H_INCLUDED
#include <pb.h>
#include "sys/types.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* ReachProtoVersion is replaced by the MAJOR, MINOR and PATCH, below. */
typedef enum _cr_ReachProtoVersion {
    cr_ReachProtoVersion_NOT_USED = 0, /* Must have a zero */
    cr_ReachProtoVersion_CURRENT_VERSION = 258 /* update this when you change this file. */
} cr_ReachProtoVersion;

typedef enum _cr_ReachProto_MAJOR_Version {
    /* MAJOR_V0       = 0;   // Must have a zero */
    cr_ReachProto_MAJOR_Version_MAJOR_VERSION = 0
} cr_ReachProto_MAJOR_Version;

typedef enum _cr_ReachProto_MINOR_Version {
    cr_ReachProto_MINOR_Version_MINOR_V0 = 0, /* Must have a zero */
    cr_ReachProto_MINOR_Version_MINOR_VERSION = 1 /* Update at a release or a big change */
} cr_ReachProto_MINOR_Version;

typedef enum _cr_ReachProto_PATCH_Version {
    cr_ReachProto_PATCH_Version_PATCH_V0 = 0, /* Must have a zero */
    cr_ReachProto_PATCH_Version_PATCH_VERSION = 7 /* Update when something changes */
} cr_ReachProto_PATCH_Version;

typedef enum _cr_ReachMessageTypes {
    cr_ReachMessageTypes_INVALID = 0, /* No Valid Message */
    cr_ReachMessageTypes_ERROR_REPORT = 1,
    cr_ReachMessageTypes_PING = 2,
    cr_ReachMessageTypes_GET_DEVICE_INFO = 3,
    /* Parameters */
    cr_ReachMessageTypes_DISCOVER_PARAMETERS = 5,
    cr_ReachMessageTypes_DISCOVER_PARAM_EX = 6,
    cr_ReachMessageTypes_READ_PARAMETERS = 7,
    cr_ReachMessageTypes_WRITE_PARAMETERS = 8,
    cr_ReachMessageTypes_PARAMETER_NOTIFICATION = 10, /* A parameter has changed */
    cr_ReachMessageTypes_DISCOVER_NOTIFICATIONS = 11, /* find out how notifications are setup */
    cr_ReachMessageTypes_PARAM_ENABLE_NOTIFY = 50, /* setup parameter notifications */
    cr_ReachMessageTypes_PARAM_DISABLE_NOTIFY = 51, /* disable parameter notifications */
    /* File Transfers */
    cr_ReachMessageTypes_DISCOVER_FILES = 12,
    cr_ReachMessageTypes_TRANSFER_INIT = 13, /* Begins a Transfer */
    cr_ReachMessageTypes_TRANSFER_DATA = 14, /* Sends Data */
    /* Clears Sender (Client / Service) to Send More Data: */
    cr_ReachMessageTypes_TRANSFER_DATA_NOTIFICATION = 15,
    cr_ReachMessageTypes_DISCOVER_COMMANDS = 17,
    cr_ReachMessageTypes_SEND_COMMAND = 18,
    /* Command Line Interface */
    cr_ReachMessageTypes_CLI_NOTIFICATION = 20,
    /* Streams */
    cr_ReachMessageTypes_DISCOVER_STREAMS = 25,
    cr_ReachMessageTypes_OPEN_STREAM = 26,
    cr_ReachMessageTypes_CLOSE_STREAM = 27,
    cr_ReachMessageTypes_STREAM_DATA_NOTIFICATION = 28,
    /* Time */
    cr_ReachMessageTypes_SET_TIME = 30,
    cr_ReachMessageTypes_GET_TIME = 31,
    /* WiFi */
    cr_ReachMessageTypes_DISCOVER_WIFI = 40,
    cr_ReachMessageTypes_WIFI_CONNECT = 41
} cr_ReachMessageTypes;

/* binary bit masks or'ed together into the DeviceInfoResponse.services */
typedef enum _cr_ServiceIds {
    cr_ServiceIds_NO_SVC_ID = 0,
    cr_ServiceIds_PARAMETER_REPO = 1,
    cr_ServiceIds_FILES = 2,
    cr_ServiceIds_STREAMS = 4,
    cr_ServiceIds_COMMANDS = 8,
    cr_ServiceIds_CLI = 16,
    cr_ServiceIds_TIME = 32,
    cr_ServiceIds_WIFI = 64
} cr_ServiceIds;

/* binary bit masks or'ed together into the DeviceInfoResponse.endpoints */
typedef enum _cr_EndpointIds {
    cr_EndpointIds_NO_ENDPOINTS = 0,
    cr_EndpointIds_ONE = 1,
    cr_EndpointIds_TWO = 2,
    cr_EndpointIds_THREE = 4,
    cr_EndpointIds_FOUR = 8
} cr_EndpointIds;

typedef enum _cr_ParameterDataType {
    cr_ParameterDataType_UINT32 = 0,
    cr_ParameterDataType_INT32 = 1,
    cr_ParameterDataType_FLOAT32 = 2,
    cr_ParameterDataType_UINT64 = 3,
    cr_ParameterDataType_INT64 = 4,
    cr_ParameterDataType_FLOAT64 = 5,
    cr_ParameterDataType_BOOL = 6,
    cr_ParameterDataType_STRING = 7, /* ASCII or UTF-8. Null Terminated. */
    cr_ParameterDataType_ENUMERATION = 8,
    cr_ParameterDataType_BIT_FIELD = 9,
    cr_ParameterDataType_BYTE_ARRAY = 10
} cr_ParameterDataType;

typedef enum _cr_CLIType {
    cr_CLIType_NO_CLI = 0,
    cr_CLIType_COMMAND = 1,
    cr_CLIType_REPORT = 2
} cr_CLIType;

typedef enum _cr_AccessLevel {
    cr_AccessLevel_NO_ACCESS = 0,
    cr_AccessLevel_READ = 1,
    cr_AccessLevel_WRITE = 2,
    cr_AccessLevel_READ_WRITE = 3
} cr_AccessLevel;

typedef enum _cr_StorageLocation {
    cr_StorageLocation_STORAGE_LOCATION_INVALID = 0,
    cr_StorageLocation_RAM = 1,
    cr_StorageLocation_NONVOLATILE = 2,
    cr_StorageLocation_RAM_EXTENDED = 3,
    cr_StorageLocation_NONVOLATILE_EXTENDED = 4
} cr_StorageLocation;

typedef enum _cr_WiFiSecurity {
    cr_WiFiSecurity_OPEN = 0, /* No security */
    cr_WiFiSecurity_WEP = 1, /* WEP */
    cr_WiFiSecurity_WPA = 2, /* WPA */
    cr_WiFiSecurity_WPA2 = 3, /* WPA2 */
    cr_WiFiSecurity_WPA3 = 4 /* WPA3 */
} cr_WiFiSecurity;

typedef enum _cr_WiFiBand {
    cr_WiFiBand_NO_BAND = 0, /* Not specified */
    cr_WiFiBand_BAND_2 = 2, /* 2.4GHz */
    cr_WiFiBand_BAND_5 = 5 /* 5GHz */
} cr_WiFiBand;

typedef enum _cr_WiFiState {
    cr_WiFiState_NOT_CONNECTED = 0, /* connected, active */
    cr_WiFiState_CONNECTED = 1 /* disconnected */
} cr_WiFiState;

typedef enum _cr_ErrorCodes {
    cr_ErrorCodes_NO_ERROR = 0,
    cr_ErrorCodes_NO_DATA = 1, /*  */
    cr_ErrorCodes_READ_FAILED = 2, /*  */
    cr_ErrorCodes_WRITE_FAILED = 3, /*  */
    cr_ErrorCodes_NOT_IMPLEMENTED = 4, /* returned by weak implementations */
    cr_ErrorCodes_MALFORMED_MESSAGE = 5, /* not yet used */
    cr_ErrorCodes_NO_SERVICE = 6, /* not yet used */
    cr_ErrorCodes_PERMISSION_DENIED = 7, /*  */
    cr_ErrorCodes_BUFFER_TOO_SMALL = 8, /*  */
    cr_ErrorCodes_INVALID_PARAMETER = 9, /*  */
    cr_ErrorCodes_CHECKSUM_MISMATCH = 10, /* not yet used */
    cr_ErrorCodes_DECODING_FAILED = 11, /*  */
    cr_ErrorCodes_ENCODING_FAILED = 12, /*  */
    cr_ErrorCodes_INVALID_STATE = 13, /*  */
    cr_ErrorCodes_NO_RESPONSE = 14, /* handler signals no response is necessary */
    cr_ErrorCodes_BAD_FILE = 15, /* bad file ID */
    cr_ErrorCodes_PACKET_COUNT_ERR = 16,
    cr_ErrorCodes_CHALLENGE_FAILED = 17,
    cr_ErrorCodes_PARAMETER_LOCKED = 18,
    cr_ErrorCodes_NO_RESOURCE = 19, /* as in no more param notification slots. */
    cr_ErrorCodes_ABORT = 1000 /* Operation cancellation */
} cr_ErrorCodes;

typedef enum _cr_FileTransferState {
    cr_FileTransferState_FILE_TRANSFER_INVALID = 0,
    cr_FileTransferState_IDLE = 1,
    cr_FileTransferState_INIT = 2,
    cr_FileTransferState_DATA = 3,
    cr_FileTransferState_COMPLETE = 4
} cr_FileTransferState;

typedef enum _cr_SizesOffsets {
    cr_SizesOffsets_MAX_MESSAGE_SIZE_OFFSET = 0, /* uint16_t, little endian */
    cr_SizesOffsets_BIG_DATA_BUFFER_SIZE_OFFSET = 2, /* uint16_t, little endian */
    cr_SizesOffsets_PARAMETER_BUFFER_COUNT_OFFSET = 4, /* uint8_t */
    cr_SizesOffsets_NUM_PARAMS_IN_RESPONSE_OFFSET = 5, /* uint8_t */
    cr_SizesOffsets_DESCRIPTION_LEN_OFFSET = 6, /* uint8_t */
    cr_SizesOffsets_MAX_PARAM_BYTES_OFFSET = 7, /* uint8_t */
    cr_SizesOffsets_PARAM_INFO_DESCRIPTION_LEN_OFFSET = 8, /* uint8_t */
    cr_SizesOffsets_MEDIUM_STRING_LEN_OFFSET = 9, /* uint8_t */
    cr_SizesOffsets_SHORT_STRING_LEN_OFFSET = 10, /* uint8_t */
    cr_SizesOffsets_PARAM_NOTIFY_CONFIG_COUNT_OFFSET = 11, /* uint8_t */
    cr_SizesOffsets_NUM_DESCRIPTORS_IN_RESPONSE_OFFSET = 12, /* uint8_t */
    cr_SizesOffsets_NUM_PARAM_NOTIFICATIONS_OFFSET = 13, /* uint8_t */
    cr_SizesOffsets_NUM_COMMANDS_IN_RESPONSE_OFFSET = 14, /* uint8_t */
    cr_SizesOffsets_COUNT_PARAM_DESC_IN_RESPONSE_OFFSET = 15, /* uint8_t */
    cr_SizesOffsets_STRUCTURE_SIZE = 16
} cr_SizesOffsets;

/* Struct definitions */
/* ----------------------------
 Service Routing Message Header
---------------------------- */
typedef struct _cr_ReachMessageHeader {
    /* This ID defines the Type of Message being carried in the Envelope / Header */
    uint32_t message_type;
    /* Routing for endpoints other than zero. */
    uint32_t endpoint_id;
    /* To support multiple clients */
    uint32_t client_id;
    /* Zero when transaction is complete */
    uint32_t remaining_objects;
    /* An ID for a series of messages */
    uint32_t transaction_id;
} cr_ReachMessageHeader;

typedef PB_BYTES_ARRAY_T(208) cr_ReachMessage_payload_t;
typedef struct _cr_ReachMessage {
    bool has_header;
    cr_ReachMessageHeader header;
    cr_ReachMessage_payload_t payload;
} cr_ReachMessage;

typedef PB_BYTES_ARRAY_T(4) cr_AhsokaMessageHeader_client_id_t;
/* ----------------------------
 This Service Routing Message Header is used in the OpenPV system.
 Reach can speak it.
 This object represents the Layer 2 Message Format for OpenPV Service Messages.
---------------------------- */
typedef struct _cr_AhsokaMessageHeader {
    /* This ID defines the Type of Message being carried in the Envelope / Header */
    int32_t transport_id;
    /* This ID defines a unique Message / Response used when out of order messages are needed */
    int32_t client_message_id;
    /* Unique ID for a Client used in Services that support Multiple Clients 
 OpenPV would use a GUID but Reach uses a 4 byte integer */
    cr_AhsokaMessageHeader_client_id_t client_id;
    /* The size of the message payload (in packets) that follows this header */
    int32_t message_size;
    /* Routing for Non-Endpoint Style Transports. 
 Note: Endpoint 0 is Reserved for Service Discovery for Non-Endpoint Transports */
    uint32_t endpoint_id;
    /* (Not supported) Indicates that the message has used deflate compression in addition to pbuff encoding */
    bool is_message_compressed;
} cr_AhsokaMessageHeader;

/* ERROR_REPORT: Could be sent asynchronously to indicate an error. */
typedef struct _cr_ErrorReport {
    int32_t result; /* Error Result */
    char result_message[194]; /* Error String */
} cr_ErrorReport;

typedef PB_BYTES_ARRAY_T(194) cr_PingRequest_echo_data_t;
/* Request Object used to Echo Data for testing the Device Communication */
typedef struct _cr_PingRequest {
    cr_PingRequest_echo_data_t echo_data; /* Data which should be echoed in the response */
} cr_PingRequest;

typedef PB_BYTES_ARRAY_T(194) cr_PingResponse_echo_data_t;
/* Response Object used to Echo Data for testing the Device Communication */
typedef struct _cr_PingResponse {
    cr_PingResponse_echo_data_t echo_data; /* The same data sent in the request */
    int32_t signal_strength; /* rssi : Rssi express in strength so clients don't have to interpret */
} cr_PingResponse;

/* ------------------------------------------------------
 Required Device Information Service
 Reach sessions are opened with the device info request and response.  
 ------------------------------------------------------ */
typedef struct _cr_DeviceInfoRequest {
    /* The request can include a challenge key to grant or deny access to parts of the system. */
    bool has_challenge_key;
    char challenge_key[32];
    /* The client shares its version to enable backward compatibility. */
    char client_protocol_version[16];
} cr_DeviceInfoRequest;

typedef PB_BYTES_ARRAY_T(16) cr_DeviceInfoResponse_application_identifier_t;
typedef PB_BYTES_ARRAY_T(16) cr_DeviceInfoResponse_sizes_struct_t;
typedef struct _cr_DeviceInfoResponse {
    int32_t protocol_version; /* Supported Protocol Version (deprecated) */
    char device_name[24]; /* Name, Typically Model Name */
    char manufacturer[24];
    char device_description[48]; /* Description */
    /* Each endpoint advertises a "main" FW version.
 If there are other FW versions, put them in the parameter repo. */
    char firmware_version[16];
    /* protocol version as a string */
    char protocol_version_string[16];
    /* A bit mask, allowing support for up to 32 services */
    uint32_t services;
    /* Used to avoid reloading the parameter descriptions */
    uint32_t parameter_metadata_hash;
    bool has_application_identifier;
    cr_DeviceInfoResponse_application_identifier_t application_identifier; /* A UUID to find a Custom firmware_version */
    uint32_t endpoints; /* bit mask, non-zero if other endpoints. */
    cr_DeviceInfoResponse_sizes_struct_t sizes_struct; /* packed. See SizesOffsets */
} cr_DeviceInfoResponse;

/* ------------------------------------------------------
 Parameter Service
 Parameters provide a simple key:value database. The key is an ID number.  
 The value can be of various common types up to (typically) 32 bytes.  
 Parameterssupport a robust description which can be const, stored in flash.  
 Parameters can be configured to support notifying the client.
 ------------------------------------------------------ */
typedef struct _cr_ParameterInfoRequest {
    pb_size_t parameter_ids_count;
    uint32_t parameter_ids[32]; /* ID's to Fetch (Empty to Get All) */
} cr_ParameterInfoRequest;

typedef struct _cr_ParameterInfo {
    uint32_t id; /* Id */
    cr_ParameterDataType data_type; /* DataType */
    uint32_t size_in_bytes; /* used by some devices */
    char name[24]; /* Name */
    cr_AccessLevel access; /* Access */
    bool has_description;
    char description[32]; /* Description */
    char units[16]; /* Units */
    bool has_range_min;
    double range_min; /* Range Max */
    bool has_range_max;
    double range_max; /* Range Max */
    bool has_default_value;
    double default_value; /* Show instead of value if no value. */
    cr_StorageLocation storage_location; /* RAM or NVM or ? */
} cr_ParameterInfo;

typedef struct _cr_ParameterInfoResponse {
    pb_size_t parameter_infos_count;
    cr_ParameterInfo parameter_infos[2]; /* Array of Param Infos */
} cr_ParameterInfoResponse;

/* Give names to enums and bitfields */
typedef struct _cr_ParamExKey {
    uint32_t id; /* the valud of the enum */
    char name[16]; /* the name of the enum */
} cr_ParamExKey;

/* also used for bitfields */
typedef struct _cr_ParamExInfoResponse {
    uint32_t associated_pid;
    cr_ParameterDataType data_type;
    pb_size_t enumerations_count;
    cr_ParamExKey enumerations[8];
    uint32_t pei_id;
} cr_ParamExInfoResponse;

/* ------------------------------------------------------
 Parameter Reads
 ------------------------------------------------------ */
typedef struct _cr_ParameterRead {
    pb_size_t parameter_ids_count;
    uint32_t parameter_ids[32]; /* i: ID -  Leave Empty to Retrieve All */
    uint32_t read_after_timestamp; /* Allows for retrieval of only new / changed values. */
} cr_ParameterRead;

typedef struct _cr_ParameterWriteResponse {
    int32_t result; /* 0 if OK */
    bool has_result_message;
    char result_message[194]; /* Error String */
} cr_ParameterWriteResponse;

/* ------------------------------------------------------
 Parameter Notification configuration
 Notification can be enabled or disabled
 ------------------------------------------------------ */
typedef struct _cr_ParameterNotifyConfig {
    uint32_t parameter_id; /* Which param */
    uint32_t minimum_notification_period; /* min_ms: Minimum Notification Interval (ms) */
    uint32_t maximum_notification_period; /* max_ms: Minimum Notification Interval (ms) */
    float minimum_delta; /* notify only if change by this much */
} cr_ParameterNotifyConfig;

typedef struct _cr_ParameterEnableNotifications {
    pb_size_t configs_count;
    cr_ParameterNotifyConfig configs[8];
    bool disable_all_first;
} cr_ParameterEnableNotifications;

typedef struct _cr_ParameterDisableNotifications {
    pb_size_t pids_count;
    uint32_t pids[32];
} cr_ParameterDisableNotifications;

typedef struct _cr_ParameterNotifyConfigResponse {
    int32_t result; /* zero if all OK */
    bool has_result_message;
    char result_message[194]; /* Error String */
} cr_ParameterNotifyConfigResponse;

/* ------------------------------------------------------
 The client can discover how notifications are setup.
 ------------------------------------------------------ */
typedef struct _cr_DiscoverParameterNotifications {
    pb_size_t parameter_ids_count;
    uint32_t parameter_ids[32]; /* i: ID -  Leave Empty to Retrieve All */
} cr_DiscoverParameterNotifications;

typedef struct _cr_DiscoverParameterNotificationsResponse {
    pb_size_t configs_count;
    cr_ParameterNotifyConfig configs[8];
} cr_DiscoverParameterNotificationsResponse;

typedef PB_BYTES_ARRAY_T(32) cr_ParameterValue_bytes_value_t;
/* --------------------------------------------------------
 Message for Sending / Receiving a Single Parameter Value
 Uses OnOf (Union) for Values
 -------------------------------------------------------- */
typedef struct _cr_ParameterValue {
    uint32_t parameter_id; /* i: ID */
    uint32_t timestamp; /* ts: Time Stamp for Notification */
    pb_size_t which_value;
    union {
        uint32_t uint32_value; /* Uint */
        int32_t sint32_value; /* Signed Int */
        float float32_value; /* Float */
        uint64_t uint64_value; /* Uint64 */
        int64_t sint64_value; /* Signed Int 64 */
        double float64_value; /* double */
        bool bool_value; /* Bool */
        char string_value[32]; /* String values (UTF8) */
        uint32_t enum_value;
        uint32_t bitfield_value;
        cr_ParameterValue_bytes_value_t bytes_value; /* byte array values */
    } value;
} cr_ParameterValue;

typedef struct _cr_ParameterReadResponse {
    /* The read_timestamp indicates when this param was last read.  
 Reading resets this value to now. */
    uint32_t read_timestamp; /* Returns timestamp of last read...useful for */
    /* polling large variable lists. */
    pb_size_t values_count;
    cr_ParameterValue values[4]; /* Array of Result Values */
} cr_ParameterReadResponse;

/* ------------------------------------------------------
 Parameter Writes
 ------------------------------------------------------ */
typedef struct _cr_ParameterWrite {
    pb_size_t values_count;
    cr_ParameterValue values[4]; /* Array of Write Values */
} cr_ParameterWrite;

/* when parameters change */
typedef struct _cr_ParameterNotification {
    pb_size_t values_count;
    cr_ParameterValue values[4]; /* Array of Result Values */
} cr_ParameterNotification;

/* ------------------------------------------------------
 (optional) File Service
 The file service provides a method of efficiently transfering large blocks of data over BLE.
 ------------------------------------------------------ */
typedef struct _cr_DiscoverFiles {
    char dummy_field;
} cr_DiscoverFiles;

typedef struct _cr_FileInfo {
    uint32_t file_id; /* ID */
    char file_name[24]; /* Name */
    cr_AccessLevel access; /* Access Level (Read / Write) */
    int32_t current_size_bytes; /* size in bytes */
    cr_StorageLocation storage_location;
    bool require_checksum; /* set true to request checksum generation and validation. */
    uint32_t maximum_size_bytes; /* Determined by storage space */
} cr_FileInfo;

typedef struct _cr_DiscoverFilesResponse {
    pb_size_t file_infos_count;
    cr_FileInfo file_infos[4]; /* Array of File Infos */
} cr_DiscoverFilesResponse;

/* ------------------------------------------------------
 Begins a File Transfer (Upload / Download)
 ------------------------------------------------------ */
typedef struct _cr_FileTransferRequest {
    uint32_t file_id; /* File ID */
    uint32_t read_write; /* 0 for read, 1 for write. */
    uint32_t request_offset; /* where to access in the file */
    uint32_t transfer_length; /* bytes to read or write */
    uint32_t transfer_id; /* In case of multiple transfers */
    uint32_t messages_per_ack; /* obsolete.  Use requested_ack_rate. */
    uint32_t timeout_in_ms; /* ms before abandonment */
    bool has_requested_ack_rate;
    uint32_t requested_ack_rate; /* number of messages before ACK. */
    bool require_checksum; /* set true to enable checksum generation and validation. */
} cr_FileTransferRequest;

typedef struct _cr_FileTransferResponse {
    int32_t result; /* 0 if OK */
    uint32_t transfer_id; /* Transfer ID */
    uint32_t ack_rate; /* confirms or overrides request */
    bool has_result_message;
    char result_message[194];
} cr_FileTransferResponse;

typedef PB_BYTES_ARRAY_T(194) cr_FileTransferData_message_data_t;
/* Bi-Directional Message */
typedef struct _cr_FileTransferData {
    int32_t result; /* non-zero for error */
    uint32_t transfer_id; /* Transfer ID */
    uint32_t message_number; /* counts up */
    cr_FileTransferData_message_data_t message_data; /* Data */
    bool has_checksum;
    int32_t checksum; /* Optional RFC 1071 checksum for integrity checking */
} cr_FileTransferData;

typedef struct _cr_FileTransferDataNotification {
    int32_t result; /* 0 for success */
    bool has_result_message;
    char result_message[194];
    bool is_complete;
    uint32_t transfer_id; /* Transfer ID */
    uint32_t retry_offset; /* file offset where error occurred */
} cr_FileTransferDataNotification;

typedef struct _cr_FileEraseRequest {
    uint32_t file_id; /* File ID */
} cr_FileEraseRequest;

typedef struct _cr_FileEraseResponse {
    uint32_t file_id; /* File ID */
    int32_t result; /* err~ */
    bool has_result_message;
    char result_message[194];
} cr_FileEraseResponse;

/* ------------------------------------------------------
 Discover Streams
 ------------------------------------------------------ */
typedef struct _cr_DiscoverStreams {
    char dummy_field;
} cr_DiscoverStreams;

typedef struct _cr_StreamInfo {
    int32_t stream_id;
    cr_AccessLevel access; /* Access Level for Stream  Read / Write. */
    char name[24]; /* Name of Stream / CLI. */
    int32_t max_bytes_per_message; /* Max Size of Messages. */
} cr_StreamInfo;

typedef struct _cr_DiscoverStreamsResponse {
    pb_size_t streams_count;
    cr_StreamInfo streams[4];
} cr_DiscoverStreamsResponse;

typedef struct _cr_StreamOpen {
    int32_t stream_id; /* Stream ID */
    cr_AccessLevel access; /* Read or Write. */
} cr_StreamOpen;

typedef struct _cr_StreamOpenResponse {
    int32_t stream_id; /* Stream ID */
    int32_t result; /* Carries Success / Result */
    bool has_result_message;
    char result_message[194];
} cr_StreamOpenResponse;

typedef struct _cr_StreamClose {
    int32_t stream_id; /* Stream ID */
} cr_StreamClose;

typedef PB_BYTES_ARRAY_T(194) cr_StreamData_message_data_t;
/* Bi-Directional STREAM_DATA_NOTIFICATION Message */
typedef struct _cr_StreamData {
    int32_t stream_id; /* Stream ID */
    uint32_t roll_count; /* Message Number (Roll Count) */
    cr_StreamData_message_data_t message_data; /* Data */
    int32_t checksum; /* Optional for integrity checking */
} cr_StreamData;

/* ------------------------------------------------------
 (optional) Command Service
 Allows actions to be triggered from the Reach UI.
 ------------------------------------------------------ */
typedef struct _cr_DiscoverCommands {
    char dummy_field;
} cr_DiscoverCommands;

typedef struct _cr_CommandInfo {
    uint32_t id;
    char name[24]; /* Descriptive name */
    bool has_description;
    char description[48]; /* Optional description of the command */
    bool has_timeout;
    uint32_t timeout; /* Optional command timeout */
} cr_CommandInfo;

typedef struct _cr_DiscoverCommandsResponse {
    pb_size_t available_commands_count;
    cr_CommandInfo available_commands[2]; /* Array of v:n    Values : Names */
} cr_DiscoverCommandsResponse;

/* ------------------------------------------------------
 Send Command
 ------------------------------------------------------ */
typedef struct _cr_SendCommand {
    uint32_t command_id;
} cr_SendCommand;

typedef struct _cr_SendCommandResponse {
    int32_t result; /* Carries Success / Result */
    bool has_result_message;
    char result_message[194];
} cr_SendCommandResponse;

/* Bi-Directional CLI_DATA Message */
typedef struct _cr_CLIData {
    char message_data[194]; /* Data */
} cr_CLIData;

/* ------------------------------------------------------
 Optional Time Service
 The time service is designed to allow the client to 
 set and adjust the real time clock in a server device.
 The time is best specified as UTC plus timezone offset.
 Although the timezone is optional, it's best to use it.
 ------------------------------------------------------ */
typedef struct _cr_TimeSetRequest {
    int64_t seconds_utc; /* linux epoch */
    bool has_timezone;
    int32_t timezone; /* seconds adjustment */
} cr_TimeSetRequest;

typedef struct _cr_TimeSetResponse {
    int32_t result; /* Carries Success / Result */
    bool has_result_message;
    char result_message[194];
} cr_TimeSetResponse;

typedef struct _cr_TimeGetRequest {
    char dummy_field;
} cr_TimeGetRequest;

typedef struct _cr_TimeGetResponse {
    int32_t result; /* Carries Success / Result */
    bool has_result_message;
    char result_message[194];
    int64_t seconds_utc; /* linux epoch */
    bool has_timezone;
    int32_t timezone; /* seconds adjustment */
} cr_TimeGetResponse;

/* ------------------------------------------------------
 WiFi Service
 The WiFi service is intended to simplify the 
 repetitive task of communicating WiFi credentials 
 to the device.
 ------------------------------------------------------ */
typedef struct _cr_ConnectionDescription {
    char ssid[32];
    bool has_signal_strength;
    int32_t signal_strength; /* dB, RSSI */
    bool has_sec;
    cr_WiFiSecurity sec;
    bool has_band;
    cr_WiFiBand band;
} cr_ConnectionDescription;

typedef struct _cr_DiscoverWiFiRequest {
    cr_WiFiState state; /* get the current connection, scanned SSID's */
} cr_DiscoverWiFiRequest;

typedef struct _cr_DiscoverWiFiResponse {
    int32_t result; /* 0 for success */
    bool has_result_message;
    char result_message[48];
    int32_t available_AP;
    cr_WiFiState state;
    uint32_t connectionId; /* connected is 0, others increment. */
    bool has_cd;
    cr_ConnectionDescription cd;
} cr_DiscoverWiFiResponse;

typedef struct _cr_WiFiConnectionRequest {
    cr_WiFiState action; /* connect or disconnect */
    bool has_password;
    char password[32]; /* required to connect */
    bool has_cd;
    cr_ConnectionDescription cd; /* required to connect */
    bool has_autoconnect;
    bool autoconnect; /* required to connect */
} cr_WiFiConnectionRequest;

typedef struct _cr_WiFiConnectionResponse {
    int32_t result; /* 0 for success */
    bool has_signal_strength;
    int32_t signal_strength; /* RSSI */
    bool has_result_message;
    char result_message[194]; /* describes any error */
} cr_WiFiConnectionResponse;

/* This data describing the sizes of the structures used in C code is 
 communicated in a packed format in the device info structure.  
 Here it's defined in an unpacked (all 32 bit) format.  Use the offsets 
 defined below (SizesOffsets) to unpack into this structure.
 The file "reach_ble_proto_sizes.h" and the function 
 populate_device_info_sizes() are good places to look for further info.

 This structure is updated at proto version 10.  Update earlier code. */
typedef struct _cr_BufferSizes {
    /* The largest message that can be communicated (16 bits) */
    uint32_t max_message_size;
    /* The size of the buffer used for the longest strings. (16 bits) 
 Examples include the command line and the error string. */
    uint32_t big_data_buffer_size;
    /* The number of parameter buffers kept by the device.
 This determines the number of parameters that can be
 handled in a single message. (8 bits) */
    uint32_t parameter_buffer_count;
    /* The number of parameter values that fit in one message. (8 bits) */
    uint32_t num_params_in_response;
    /* number of descriptors (stream, file) that fit in one message.  (8 bits) */
    uint32_t num_descriptors_in_response;
    /* The length of the description fields in various structures
 Previously known as long_string_len.   (8 bits) */
    uint32_t description_len;
    /* The number of bytes in the largest parameter data.  (8 bits) */
    uint32_t max_param_bytes;
    /* The length of most (medium) strings.  (8 bits)
 Used for device name, file names, command names. */
    uint32_t medium_string_len;
    /* The number of bytes in short strings like the units label.  (8 bits)
 Also the names of enumerations and the version string. */
    uint32_t short_string_len;
    /* The number of bytes in the param info description string  (8 bits) */
    uint32_t param_info_description_len;
    /* Number of parameter notifications supported  (8 bits) */
    uint32_t num_param_notifications;
    /* not currently used  (8 bits) */
    uint32_t num_commands_in_response;
    /* number of param descriptions that can be in one info packet. (8 bits) */
    uint32_t count_param_desc_in_response;
    /* The max number of parameter notification configurations 
 that a client will provide. */
    uint32_t param_notify_config_count;
} cr_BufferSizes;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _cr_ReachProtoVersion_MIN cr_ReachProtoVersion_NOT_USED
#define _cr_ReachProtoVersion_MAX cr_ReachProtoVersion_CURRENT_VERSION
#define _cr_ReachProtoVersion_ARRAYSIZE ((cr_ReachProtoVersion)(cr_ReachProtoVersion_CURRENT_VERSION+1))

#define _cr_ReachProto_MAJOR_Version_MIN cr_ReachProto_MAJOR_Version_MAJOR_VERSION
#define _cr_ReachProto_MAJOR_Version_MAX cr_ReachProto_MAJOR_Version_MAJOR_VERSION
#define _cr_ReachProto_MAJOR_Version_ARRAYSIZE ((cr_ReachProto_MAJOR_Version)(cr_ReachProto_MAJOR_Version_MAJOR_VERSION+1))

#define _cr_ReachProto_MINOR_Version_MIN cr_ReachProto_MINOR_Version_MINOR_V0
#define _cr_ReachProto_MINOR_Version_MAX cr_ReachProto_MINOR_Version_MINOR_VERSION
#define _cr_ReachProto_MINOR_Version_ARRAYSIZE ((cr_ReachProto_MINOR_Version)(cr_ReachProto_MINOR_Version_MINOR_VERSION+1))

#define _cr_ReachProto_PATCH_Version_MIN cr_ReachProto_PATCH_Version_PATCH_V0
#define _cr_ReachProto_PATCH_Version_MAX cr_ReachProto_PATCH_Version_PATCH_VERSION
#define _cr_ReachProto_PATCH_Version_ARRAYSIZE ((cr_ReachProto_PATCH_Version)(cr_ReachProto_PATCH_Version_PATCH_VERSION+1))

#define _cr_ReachMessageTypes_MIN cr_ReachMessageTypes_INVALID
#define _cr_ReachMessageTypes_MAX cr_ReachMessageTypes_PARAM_DISABLE_NOTIFY
#define _cr_ReachMessageTypes_ARRAYSIZE ((cr_ReachMessageTypes)(cr_ReachMessageTypes_PARAM_DISABLE_NOTIFY+1))

#define _cr_ServiceIds_MIN cr_ServiceIds_NO_SVC_ID
#define _cr_ServiceIds_MAX cr_ServiceIds_WIFI
#define _cr_ServiceIds_ARRAYSIZE ((cr_ServiceIds)(cr_ServiceIds_WIFI+1))

#define _cr_EndpointIds_MIN cr_EndpointIds_NO_ENDPOINTS
#define _cr_EndpointIds_MAX cr_EndpointIds_FOUR
#define _cr_EndpointIds_ARRAYSIZE ((cr_EndpointIds)(cr_EndpointIds_FOUR+1))

#define _cr_ParameterDataType_MIN cr_ParameterDataType_UINT32
#define _cr_ParameterDataType_MAX cr_ParameterDataType_BYTE_ARRAY
#define _cr_ParameterDataType_ARRAYSIZE ((cr_ParameterDataType)(cr_ParameterDataType_BYTE_ARRAY+1))

#define _cr_CLIType_MIN cr_CLIType_NO_CLI
#define _cr_CLIType_MAX cr_CLIType_REPORT
#define _cr_CLIType_ARRAYSIZE ((cr_CLIType)(cr_CLIType_REPORT+1))

#define _cr_AccessLevel_MIN cr_AccessLevel_NO_ACCESS
#define _cr_AccessLevel_MAX cr_AccessLevel_READ_WRITE
#define _cr_AccessLevel_ARRAYSIZE ((cr_AccessLevel)(cr_AccessLevel_READ_WRITE+1))

#define _cr_StorageLocation_MIN cr_StorageLocation_STORAGE_LOCATION_INVALID
#define _cr_StorageLocation_MAX cr_StorageLocation_NONVOLATILE_EXTENDED
#define _cr_StorageLocation_ARRAYSIZE ((cr_StorageLocation)(cr_StorageLocation_NONVOLATILE_EXTENDED+1))

#define _cr_WiFiSecurity_MIN cr_WiFiSecurity_OPEN
#define _cr_WiFiSecurity_MAX cr_WiFiSecurity_WPA3
#define _cr_WiFiSecurity_ARRAYSIZE ((cr_WiFiSecurity)(cr_WiFiSecurity_WPA3+1))

#define _cr_WiFiBand_MIN cr_WiFiBand_NO_BAND
#define _cr_WiFiBand_MAX cr_WiFiBand_BAND_5
#define _cr_WiFiBand_ARRAYSIZE ((cr_WiFiBand)(cr_WiFiBand_BAND_5+1))

#define _cr_WiFiState_MIN cr_WiFiState_NOT_CONNECTED
#define _cr_WiFiState_MAX cr_WiFiState_CONNECTED
#define _cr_WiFiState_ARRAYSIZE ((cr_WiFiState)(cr_WiFiState_CONNECTED+1))

#define _cr_ErrorCodes_MIN cr_ErrorCodes_NO_ERROR
#define _cr_ErrorCodes_MAX cr_ErrorCodes_ABORT
#define _cr_ErrorCodes_ARRAYSIZE ((cr_ErrorCodes)(cr_ErrorCodes_ABORT+1))

#define _cr_FileTransferState_MIN cr_FileTransferState_FILE_TRANSFER_INVALID
#define _cr_FileTransferState_MAX cr_FileTransferState_COMPLETE
#define _cr_FileTransferState_ARRAYSIZE ((cr_FileTransferState)(cr_FileTransferState_COMPLETE+1))

#define _cr_SizesOffsets_MIN cr_SizesOffsets_MAX_MESSAGE_SIZE_OFFSET
#define _cr_SizesOffsets_MAX cr_SizesOffsets_STRUCTURE_SIZE
#define _cr_SizesOffsets_ARRAYSIZE ((cr_SizesOffsets)(cr_SizesOffsets_STRUCTURE_SIZE+1))











#define cr_ParameterInfo_data_type_ENUMTYPE cr_ParameterDataType
#define cr_ParameterInfo_access_ENUMTYPE cr_AccessLevel
#define cr_ParameterInfo_storage_location_ENUMTYPE cr_StorageLocation


#define cr_ParamExInfoResponse_data_type_ENUMTYPE cr_ParameterDataType















#define cr_FileInfo_access_ENUMTYPE cr_AccessLevel
#define cr_FileInfo_storage_location_ENUMTYPE cr_StorageLocation









#define cr_StreamInfo_access_ENUMTYPE cr_AccessLevel

#define cr_StreamOpen_access_ENUMTYPE cr_AccessLevel














#define cr_ConnectionDescription_sec_ENUMTYPE cr_WiFiSecurity
#define cr_ConnectionDescription_band_ENUMTYPE cr_WiFiBand

#define cr_DiscoverWiFiRequest_state_ENUMTYPE cr_WiFiState

#define cr_DiscoverWiFiResponse_state_ENUMTYPE cr_WiFiState

#define cr_WiFiConnectionRequest_action_ENUMTYPE cr_WiFiState




/* Initializer values for message structs */
#define cr_ReachMessageHeader_init_default       {0, 0, 0, 0, 0}
#define cr_ReachMessage_init_default             {false, cr_ReachMessageHeader_init_default, {0, {0}}}
#define cr_AhsokaMessageHeader_init_default      {0, 0, {0, {0}}, 0, 0, 0}
#define cr_ErrorReport_init_default              {0, ""}
#define cr_PingRequest_init_default              {{0, {0}}}
#define cr_PingResponse_init_default             {{0, {0}}, 0}
#define cr_DeviceInfoRequest_init_default        {false, "", ""}
#define cr_DeviceInfoResponse_init_default       {0, "", "", "", "", "", 0, 0, false, {0, {0}}, 0, {0, {0}}}
#define cr_ParameterInfoRequest_init_default     {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define cr_ParameterInfoResponse_init_default    {0, {cr_ParameterInfo_init_default, cr_ParameterInfo_init_default}}
#define cr_ParameterInfo_init_default            {0, _cr_ParameterDataType_MIN, 0, "", _cr_AccessLevel_MIN, false, "", "", false, 0, false, 0, false, 0, _cr_StorageLocation_MIN}
#define cr_ParamExKey_init_default               {0, ""}
#define cr_ParamExInfoResponse_init_default      {0, _cr_ParameterDataType_MIN, 0, {cr_ParamExKey_init_default, cr_ParamExKey_init_default, cr_ParamExKey_init_default, cr_ParamExKey_init_default, cr_ParamExKey_init_default, cr_ParamExKey_init_default, cr_ParamExKey_init_default, cr_ParamExKey_init_default}, 0}
#define cr_ParameterRead_init_default            {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0}
#define cr_ParameterReadResponse_init_default    {0, 0, {cr_ParameterValue_init_default, cr_ParameterValue_init_default, cr_ParameterValue_init_default, cr_ParameterValue_init_default}}
#define cr_ParameterWrite_init_default           {0, {cr_ParameterValue_init_default, cr_ParameterValue_init_default, cr_ParameterValue_init_default, cr_ParameterValue_init_default}}
#define cr_ParameterWriteResponse_init_default   {0, false, ""}
#define cr_ParameterNotifyConfig_init_default    {0, 0, 0, 0}
#define cr_ParameterEnableNotifications_init_default {0, {cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default}, 0}
#define cr_ParameterDisableNotifications_init_default {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define cr_ParameterNotifyConfigResponse_init_default {0, false, ""}
#define cr_DiscoverParameterNotifications_init_default {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define cr_DiscoverParameterNotificationsResponse_init_default {0, {cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default, cr_ParameterNotifyConfig_init_default}}
#define cr_ParameterNotification_init_default    {0, {cr_ParameterValue_init_default, cr_ParameterValue_init_default, cr_ParameterValue_init_default, cr_ParameterValue_init_default}}
#define cr_ParameterValue_init_default           {0, 0, 0, {0}}
#define cr_DiscoverFiles_init_default            {0}
#define cr_DiscoverFilesResponse_init_default    {0, {cr_FileInfo_init_default, cr_FileInfo_init_default, cr_FileInfo_init_default, cr_FileInfo_init_default}}
#define cr_FileInfo_init_default                 {0, "", _cr_AccessLevel_MIN, 0, _cr_StorageLocation_MIN, 0, 0}
#define cr_FileTransferRequest_init_default      {0, 0, 0, 0, 0, 0, 0, false, 0, 0}
#define cr_FileTransferResponse_init_default     {0, 0, 0, false, ""}
#define cr_FileTransferData_init_default         {0, 0, 0, {0, {0}}, false, 0}
#define cr_FileTransferDataNotification_init_default {0, false, "", 0, 0, 0}
#define cr_FileEraseRequest_init_default         {0}
#define cr_FileEraseResponse_init_default        {0, 0, false, ""}
#define cr_DiscoverStreams_init_default          {0}
#define cr_DiscoverStreamsResponse_init_default  {0, {cr_StreamInfo_init_default, cr_StreamInfo_init_default, cr_StreamInfo_init_default, cr_StreamInfo_init_default}}
#define cr_StreamInfo_init_default               {0, _cr_AccessLevel_MIN, "", 0}
#define cr_StreamOpen_init_default               {0, _cr_AccessLevel_MIN}
#define cr_StreamOpenResponse_init_default       {0, 0, false, ""}
#define cr_StreamClose_init_default              {0}
#define cr_StreamData_init_default               {0, 0, {0, {0}}, 0}
#define cr_DiscoverCommands_init_default         {0}
#define cr_DiscoverCommandsResponse_init_default {0, {cr_CommandInfo_init_default, cr_CommandInfo_init_default}}
#define cr_CommandInfo_init_default              {0, "", false, "", false, 0}
#define cr_SendCommand_init_default              {0}
#define cr_SendCommandResponse_init_default      {0, false, ""}
#define cr_CLIData_init_default                  {""}
#define cr_TimeSetRequest_init_default           {0, false, 0}
#define cr_TimeSetResponse_init_default          {0, false, ""}
#define cr_TimeGetRequest_init_default           {0}
#define cr_TimeGetResponse_init_default          {0, false, "", 0, false, 0}
#define cr_ConnectionDescription_init_default    {"", false, 0, false, _cr_WiFiSecurity_MIN, false, _cr_WiFiBand_MIN}
#define cr_DiscoverWiFiRequest_init_default      {_cr_WiFiState_MIN}
#define cr_DiscoverWiFiResponse_init_default     {0, false, "", 0, _cr_WiFiState_MIN, 0, false, cr_ConnectionDescription_init_default}
#define cr_WiFiConnectionRequest_init_default    {_cr_WiFiState_MIN, false, "", false, cr_ConnectionDescription_init_default, false, 0}
#define cr_WiFiConnectionResponse_init_default   {0, false, 0, false, ""}
#define cr_BufferSizes_init_default              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define cr_ReachMessageHeader_init_zero          {0, 0, 0, 0, 0}
#define cr_ReachMessage_init_zero                {false, cr_ReachMessageHeader_init_zero, {0, {0}}}
#define cr_AhsokaMessageHeader_init_zero         {0, 0, {0, {0}}, 0, 0, 0}
#define cr_ErrorReport_init_zero                 {0, ""}
#define cr_PingRequest_init_zero                 {{0, {0}}}
#define cr_PingResponse_init_zero                {{0, {0}}, 0}
#define cr_DeviceInfoRequest_init_zero           {false, "", ""}
#define cr_DeviceInfoResponse_init_zero          {0, "", "", "", "", "", 0, 0, false, {0, {0}}, 0, {0, {0}}}
#define cr_ParameterInfoRequest_init_zero        {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define cr_ParameterInfoResponse_init_zero       {0, {cr_ParameterInfo_init_zero, cr_ParameterInfo_init_zero}}
#define cr_ParameterInfo_init_zero               {0, _cr_ParameterDataType_MIN, 0, "", _cr_AccessLevel_MIN, false, "", "", false, 0, false, 0, false, 0, _cr_StorageLocation_MIN}
#define cr_ParamExKey_init_zero                  {0, ""}
#define cr_ParamExInfoResponse_init_zero         {0, _cr_ParameterDataType_MIN, 0, {cr_ParamExKey_init_zero, cr_ParamExKey_init_zero, cr_ParamExKey_init_zero, cr_ParamExKey_init_zero, cr_ParamExKey_init_zero, cr_ParamExKey_init_zero, cr_ParamExKey_init_zero, cr_ParamExKey_init_zero}, 0}
#define cr_ParameterRead_init_zero               {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0}
#define cr_ParameterReadResponse_init_zero       {0, 0, {cr_ParameterValue_init_zero, cr_ParameterValue_init_zero, cr_ParameterValue_init_zero, cr_ParameterValue_init_zero}}
#define cr_ParameterWrite_init_zero              {0, {cr_ParameterValue_init_zero, cr_ParameterValue_init_zero, cr_ParameterValue_init_zero, cr_ParameterValue_init_zero}}
#define cr_ParameterWriteResponse_init_zero      {0, false, ""}
#define cr_ParameterNotifyConfig_init_zero       {0, 0, 0, 0}
#define cr_ParameterEnableNotifications_init_zero {0, {cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero}, 0}
#define cr_ParameterDisableNotifications_init_zero {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define cr_ParameterNotifyConfigResponse_init_zero {0, false, ""}
#define cr_DiscoverParameterNotifications_init_zero {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define cr_DiscoverParameterNotificationsResponse_init_zero {0, {cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero, cr_ParameterNotifyConfig_init_zero}}
#define cr_ParameterNotification_init_zero       {0, {cr_ParameterValue_init_zero, cr_ParameterValue_init_zero, cr_ParameterValue_init_zero, cr_ParameterValue_init_zero}}
#define cr_ParameterValue_init_zero              {0, 0, 0, {0}}
#define cr_DiscoverFiles_init_zero               {0}
#define cr_DiscoverFilesResponse_init_zero       {0, {cr_FileInfo_init_zero, cr_FileInfo_init_zero, cr_FileInfo_init_zero, cr_FileInfo_init_zero}}
#define cr_FileInfo_init_zero                    {0, "", _cr_AccessLevel_MIN, 0, _cr_StorageLocation_MIN, 0, 0}
#define cr_FileTransferRequest_init_zero         {0, 0, 0, 0, 0, 0, 0, false, 0, 0}
#define cr_FileTransferResponse_init_zero        {0, 0, 0, false, ""}
#define cr_FileTransferData_init_zero            {0, 0, 0, {0, {0}}, false, 0}
#define cr_FileTransferDataNotification_init_zero {0, false, "", 0, 0, 0}
#define cr_FileEraseRequest_init_zero            {0}
#define cr_FileEraseResponse_init_zero           {0, 0, false, ""}
#define cr_DiscoverStreams_init_zero             {0}
#define cr_DiscoverStreamsResponse_init_zero     {0, {cr_StreamInfo_init_zero, cr_StreamInfo_init_zero, cr_StreamInfo_init_zero, cr_StreamInfo_init_zero}}
#define cr_StreamInfo_init_zero                  {0, _cr_AccessLevel_MIN, "", 0}
#define cr_StreamOpen_init_zero                  {0, _cr_AccessLevel_MIN}
#define cr_StreamOpenResponse_init_zero          {0, 0, false, ""}
#define cr_StreamClose_init_zero                 {0}
#define cr_StreamData_init_zero                  {0, 0, {0, {0}}, 0}
#define cr_DiscoverCommands_init_zero            {0}
#define cr_DiscoverCommandsResponse_init_zero    {0, {cr_CommandInfo_init_zero, cr_CommandInfo_init_zero}}
#define cr_CommandInfo_init_zero                 {0, "", false, "", false, 0}
#define cr_SendCommand_init_zero                 {0}
#define cr_SendCommandResponse_init_zero         {0, false, ""}
#define cr_CLIData_init_zero                     {""}
#define cr_TimeSetRequest_init_zero              {0, false, 0}
#define cr_TimeSetResponse_init_zero             {0, false, ""}
#define cr_TimeGetRequest_init_zero              {0}
#define cr_TimeGetResponse_init_zero             {0, false, "", 0, false, 0}
#define cr_ConnectionDescription_init_zero       {"", false, 0, false, _cr_WiFiSecurity_MIN, false, _cr_WiFiBand_MIN}
#define cr_DiscoverWiFiRequest_init_zero         {_cr_WiFiState_MIN}
#define cr_DiscoverWiFiResponse_init_zero        {0, false, "", 0, _cr_WiFiState_MIN, 0, false, cr_ConnectionDescription_init_zero}
#define cr_WiFiConnectionRequest_init_zero       {_cr_WiFiState_MIN, false, "", false, cr_ConnectionDescription_init_zero, false, 0}
#define cr_WiFiConnectionResponse_init_zero      {0, false, 0, false, ""}
#define cr_BufferSizes_init_zero                 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define cr_ReachMessageHeader_message_type_tag   1
#define cr_ReachMessageHeader_endpoint_id_tag    2
#define cr_ReachMessageHeader_client_id_tag      3
#define cr_ReachMessageHeader_remaining_objects_tag 4
#define cr_ReachMessageHeader_transaction_id_tag 5
#define cr_ReachMessage_header_tag               1
#define cr_ReachMessage_payload_tag              2
#define cr_AhsokaMessageHeader_transport_id_tag  1
#define cr_AhsokaMessageHeader_client_message_id_tag 2
#define cr_AhsokaMessageHeader_client_id_tag     3
#define cr_AhsokaMessageHeader_message_size_tag  4
#define cr_AhsokaMessageHeader_endpoint_id_tag   5
#define cr_AhsokaMessageHeader_is_message_compressed_tag 6
#define cr_ErrorReport_result_tag                1
#define cr_ErrorReport_result_message_tag        2
#define cr_PingRequest_echo_data_tag             1
#define cr_PingResponse_echo_data_tag            1
#define cr_PingResponse_signal_strength_tag      2
#define cr_DeviceInfoRequest_challenge_key_tag   1
#define cr_DeviceInfoRequest_client_protocol_version_tag 2
#define cr_DeviceInfoResponse_protocol_version_tag 1
#define cr_DeviceInfoResponse_device_name_tag    2
#define cr_DeviceInfoResponse_manufacturer_tag   3
#define cr_DeviceInfoResponse_device_description_tag 4
#define cr_DeviceInfoResponse_firmware_version_tag 6
#define cr_DeviceInfoResponse_protocol_version_string_tag 7
#define cr_DeviceInfoResponse_services_tag       8
#define cr_DeviceInfoResponse_parameter_metadata_hash_tag 9
#define cr_DeviceInfoResponse_application_identifier_tag 10
#define cr_DeviceInfoResponse_endpoints_tag      11
#define cr_DeviceInfoResponse_sizes_struct_tag   20
#define cr_ParameterInfoRequest_parameter_ids_tag 2
#define cr_ParameterInfo_id_tag                  1
#define cr_ParameterInfo_data_type_tag           2
#define cr_ParameterInfo_size_in_bytes_tag       3
#define cr_ParameterInfo_name_tag                4
#define cr_ParameterInfo_access_tag              5
#define cr_ParameterInfo_description_tag         6
#define cr_ParameterInfo_units_tag               7
#define cr_ParameterInfo_range_min_tag           8
#define cr_ParameterInfo_range_max_tag           9
#define cr_ParameterInfo_default_value_tag       10
#define cr_ParameterInfo_storage_location_tag    11
#define cr_ParameterInfoResponse_parameter_infos_tag 1
#define cr_ParamExKey_id_tag                     1
#define cr_ParamExKey_name_tag                   2
#define cr_ParamExInfoResponse_associated_pid_tag 1
#define cr_ParamExInfoResponse_data_type_tag     2
#define cr_ParamExInfoResponse_enumerations_tag  3
#define cr_ParamExInfoResponse_pei_id_tag        4
#define cr_ParameterRead_parameter_ids_tag       2
#define cr_ParameterRead_read_after_timestamp_tag 3
#define cr_ParameterWriteResponse_result_tag     1
#define cr_ParameterWriteResponse_result_message_tag 2
#define cr_ParameterNotifyConfig_parameter_id_tag 1
#define cr_ParameterNotifyConfig_minimum_notification_period_tag 2
#define cr_ParameterNotifyConfig_maximum_notification_period_tag 3
#define cr_ParameterNotifyConfig_minimum_delta_tag 4
#define cr_ParameterEnableNotifications_configs_tag 1
#define cr_ParameterEnableNotifications_disable_all_first_tag 2
#define cr_ParameterDisableNotifications_pids_tag 1
#define cr_ParameterNotifyConfigResponse_result_tag 1
#define cr_ParameterNotifyConfigResponse_result_message_tag 2
#define cr_DiscoverParameterNotifications_parameter_ids_tag 1
#define cr_DiscoverParameterNotificationsResponse_configs_tag 1
#define cr_ParameterValue_parameter_id_tag       1
#define cr_ParameterValue_timestamp_tag          2
#define cr_ParameterValue_uint32_value_tag       3
#define cr_ParameterValue_sint32_value_tag       4
#define cr_ParameterValue_float32_value_tag      5
#define cr_ParameterValue_uint64_value_tag       6
#define cr_ParameterValue_sint64_value_tag       7
#define cr_ParameterValue_float64_value_tag      8
#define cr_ParameterValue_bool_value_tag         9
#define cr_ParameterValue_string_value_tag       10
#define cr_ParameterValue_enum_value_tag         11
#define cr_ParameterValue_bitfield_value_tag     12
#define cr_ParameterValue_bytes_value_tag        13
#define cr_ParameterReadResponse_read_timestamp_tag 1
#define cr_ParameterReadResponse_values_tag      3
#define cr_ParameterWrite_values_tag             3
#define cr_ParameterNotification_values_tag      2
#define cr_FileInfo_file_id_tag                  1
#define cr_FileInfo_file_name_tag                2
#define cr_FileInfo_access_tag                   3
#define cr_FileInfo_current_size_bytes_tag       4
#define cr_FileInfo_storage_location_tag         5
#define cr_FileInfo_require_checksum_tag         6
#define cr_FileInfo_maximum_size_bytes_tag       7
#define cr_DiscoverFilesResponse_file_infos_tag  1
#define cr_FileTransferRequest_file_id_tag       1
#define cr_FileTransferRequest_read_write_tag    2
#define cr_FileTransferRequest_request_offset_tag 3
#define cr_FileTransferRequest_transfer_length_tag 4
#define cr_FileTransferRequest_transfer_id_tag   5
#define cr_FileTransferRequest_messages_per_ack_tag 6
#define cr_FileTransferRequest_timeout_in_ms_tag 7
#define cr_FileTransferRequest_requested_ack_rate_tag 8
#define cr_FileTransferRequest_require_checksum_tag 9
#define cr_FileTransferResponse_result_tag       1
#define cr_FileTransferResponse_transfer_id_tag  2
#define cr_FileTransferResponse_ack_rate_tag     3
#define cr_FileTransferResponse_result_message_tag 4
#define cr_FileTransferData_result_tag           1
#define cr_FileTransferData_transfer_id_tag      2
#define cr_FileTransferData_message_number_tag   3
#define cr_FileTransferData_message_data_tag     4
#define cr_FileTransferData_checksum_tag         5
#define cr_FileTransferDataNotification_result_tag 1
#define cr_FileTransferDataNotification_result_message_tag 2
#define cr_FileTransferDataNotification_is_complete_tag 3
#define cr_FileTransferDataNotification_transfer_id_tag 4
#define cr_FileTransferDataNotification_retry_offset_tag 5
#define cr_FileEraseRequest_file_id_tag          1
#define cr_FileEraseResponse_file_id_tag         1
#define cr_FileEraseResponse_result_tag          2
#define cr_FileEraseResponse_result_message_tag  3
#define cr_StreamInfo_stream_id_tag              1
#define cr_StreamInfo_access_tag                 2
#define cr_StreamInfo_name_tag                   3
#define cr_StreamInfo_max_bytes_per_message_tag  4
#define cr_DiscoverStreamsResponse_streams_tag   1
#define cr_StreamOpen_stream_id_tag              1
#define cr_StreamOpen_access_tag                 2
#define cr_StreamOpenResponse_stream_id_tag      1
#define cr_StreamOpenResponse_result_tag         2
#define cr_StreamOpenResponse_result_message_tag 3
#define cr_StreamClose_stream_id_tag             1
#define cr_StreamData_stream_id_tag              1
#define cr_StreamData_roll_count_tag             2
#define cr_StreamData_message_data_tag           3
#define cr_StreamData_checksum_tag               4
#define cr_CommandInfo_id_tag                    1
#define cr_CommandInfo_name_tag                  2
#define cr_CommandInfo_description_tag           3
#define cr_CommandInfo_timeout_tag               4
#define cr_DiscoverCommandsResponse_available_commands_tag 1
#define cr_SendCommand_command_id_tag            1
#define cr_SendCommandResponse_result_tag        1
#define cr_SendCommandResponse_result_message_tag 2
#define cr_CLIData_message_data_tag              1
#define cr_TimeSetRequest_seconds_utc_tag        1
#define cr_TimeSetRequest_timezone_tag           2
#define cr_TimeSetResponse_result_tag            1
#define cr_TimeSetResponse_result_message_tag    2
#define cr_TimeGetResponse_result_tag            1
#define cr_TimeGetResponse_result_message_tag    2
#define cr_TimeGetResponse_seconds_utc_tag       3
#define cr_TimeGetResponse_timezone_tag          4
#define cr_ConnectionDescription_ssid_tag        1
#define cr_ConnectionDescription_signal_strength_tag 2
#define cr_ConnectionDescription_sec_tag         3
#define cr_ConnectionDescription_band_tag        4
#define cr_DiscoverWiFiRequest_state_tag         2
#define cr_DiscoverWiFiResponse_result_tag       1
#define cr_DiscoverWiFiResponse_result_message_tag 2
#define cr_DiscoverWiFiResponse_available_AP_tag 3
#define cr_DiscoverWiFiResponse_state_tag        4
#define cr_DiscoverWiFiResponse_connectionId_tag 5
#define cr_DiscoverWiFiResponse_cd_tag           6
#define cr_WiFiConnectionRequest_action_tag      1
#define cr_WiFiConnectionRequest_password_tag    2
#define cr_WiFiConnectionRequest_cd_tag          3
#define cr_WiFiConnectionRequest_autoconnect_tag 4
#define cr_WiFiConnectionResponse_result_tag     1
#define cr_WiFiConnectionResponse_signal_strength_tag 2
#define cr_WiFiConnectionResponse_result_message_tag 3
#define cr_BufferSizes_max_message_size_tag      1
#define cr_BufferSizes_big_data_buffer_size_tag  2
#define cr_BufferSizes_parameter_buffer_count_tag 3
#define cr_BufferSizes_num_params_in_response_tag 4
#define cr_BufferSizes_num_descriptors_in_response_tag 5
#define cr_BufferSizes_description_len_tag       6
#define cr_BufferSizes_max_param_bytes_tag       7
#define cr_BufferSizes_medium_string_len_tag     8
#define cr_BufferSizes_short_string_len_tag      9
#define cr_BufferSizes_param_info_description_len_tag 10
#define cr_BufferSizes_num_param_notifications_tag 11
#define cr_BufferSizes_num_commands_in_response_tag 13
#define cr_BufferSizes_count_param_desc_in_response_tag 14
#define cr_BufferSizes_param_notify_config_count_tag 15

/* Struct field encoding specification for nanopb */
#define cr_ReachMessageHeader_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   message_type,      1) \
X(a, STATIC,   SINGULAR, UINT32,   endpoint_id,       2) \
X(a, STATIC,   SINGULAR, UINT32,   client_id,         3) \
X(a, STATIC,   SINGULAR, UINT32,   remaining_objects,   4) \
X(a, STATIC,   SINGULAR, UINT32,   transaction_id,    5)
#define cr_ReachMessageHeader_CALLBACK NULL
#define cr_ReachMessageHeader_DEFAULT NULL

#define cr_ReachMessage_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  header,            1) \
X(a, STATIC,   SINGULAR, BYTES,    payload,           2)
#define cr_ReachMessage_CALLBACK NULL
#define cr_ReachMessage_DEFAULT NULL
#define cr_ReachMessage_header_MSGTYPE cr_ReachMessageHeader

#define cr_AhsokaMessageHeader_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    transport_id,      1) \
X(a, STATIC,   SINGULAR, INT32,    client_message_id,   2) \
X(a, STATIC,   SINGULAR, BYTES,    client_id,         3) \
X(a, STATIC,   SINGULAR, INT32,    message_size,      4) \
X(a, STATIC,   SINGULAR, UINT32,   endpoint_id,       5) \
X(a, STATIC,   SINGULAR, BOOL,     is_message_compressed,   6)
#define cr_AhsokaMessageHeader_CALLBACK NULL
#define cr_AhsokaMessageHeader_DEFAULT NULL

#define cr_ErrorReport_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    result,            1) \
X(a, STATIC,   SINGULAR, STRING,   result_message,    2)
#define cr_ErrorReport_CALLBACK NULL
#define cr_ErrorReport_DEFAULT NULL

#define cr_PingRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BYTES,    echo_data,         1)
#define cr_PingRequest_CALLBACK NULL
#define cr_PingRequest_DEFAULT NULL

#define cr_PingResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BYTES,    echo_data,         1) \
X(a, STATIC,   SINGULAR, INT32,    signal_strength,   2)
#define cr_PingResponse_CALLBACK NULL
#define cr_PingResponse_DEFAULT NULL

#define cr_DeviceInfoRequest_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, STRING,   challenge_key,     1) \
X(a, STATIC,   SINGULAR, STRING,   client_protocol_version,   2)
#define cr_DeviceInfoRequest_CALLBACK NULL
#define cr_DeviceInfoRequest_DEFAULT NULL

#define cr_DeviceInfoResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    protocol_version,   1) \
X(a, STATIC,   SINGULAR, STRING,   device_name,       2) \
X(a, STATIC,   SINGULAR, STRING,   manufacturer,      3) \
X(a, STATIC,   SINGULAR, STRING,   device_description,   4) \
X(a, STATIC,   SINGULAR, STRING,   firmware_version,   6) \
X(a, STATIC,   SINGULAR, STRING,   protocol_version_string,   7) \
X(a, STATIC,   SINGULAR, UINT32,   services,          8) \
X(a, STATIC,   SINGULAR, UINT32,   parameter_metadata_hash,   9) \
X(a, STATIC,   OPTIONAL, BYTES,    application_identifier,  10) \
X(a, STATIC,   SINGULAR, UINT32,   endpoints,        11) \
X(a, STATIC,   SINGULAR, BYTES,    sizes_struct,     20)
#define cr_DeviceInfoResponse_CALLBACK NULL
#define cr_DeviceInfoResponse_DEFAULT NULL

#define cr_ParameterInfoRequest_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, UINT32,   parameter_ids,     2)
#define cr_ParameterInfoRequest_CALLBACK NULL
#define cr_ParameterInfoRequest_DEFAULT NULL

#define cr_ParameterInfoResponse_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  parameter_infos,   1)
#define cr_ParameterInfoResponse_CALLBACK NULL
#define cr_ParameterInfoResponse_DEFAULT NULL
#define cr_ParameterInfoResponse_parameter_infos_MSGTYPE cr_ParameterInfo

#define cr_ParameterInfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   SINGULAR, UENUM,    data_type,         2) \
X(a, STATIC,   SINGULAR, UINT32,   size_in_bytes,     3) \
X(a, STATIC,   SINGULAR, STRING,   name,              4) \
X(a, STATIC,   SINGULAR, UENUM,    access,            5) \
X(a, STATIC,   OPTIONAL, STRING,   description,       6) \
X(a, STATIC,   SINGULAR, STRING,   units,             7) \
X(a, STATIC,   OPTIONAL, DOUBLE,   range_min,         8) \
X(a, STATIC,   OPTIONAL, DOUBLE,   range_max,         9) \
X(a, STATIC,   OPTIONAL, DOUBLE,   default_value,    10) \
X(a, STATIC,   SINGULAR, UENUM,    storage_location,  11)
#define cr_ParameterInfo_CALLBACK NULL
#define cr_ParameterInfo_DEFAULT NULL

#define cr_ParamExKey_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   SINGULAR, STRING,   name,              2)
#define cr_ParamExKey_CALLBACK NULL
#define cr_ParamExKey_DEFAULT NULL

#define cr_ParamExInfoResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   associated_pid,    1) \
X(a, STATIC,   SINGULAR, UENUM,    data_type,         2) \
X(a, STATIC,   REPEATED, MESSAGE,  enumerations,      3) \
X(a, STATIC,   SINGULAR, UINT32,   pei_id,            4)
#define cr_ParamExInfoResponse_CALLBACK NULL
#define cr_ParamExInfoResponse_DEFAULT NULL
#define cr_ParamExInfoResponse_enumerations_MSGTYPE cr_ParamExKey

#define cr_ParameterRead_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, UINT32,   parameter_ids,     2) \
X(a, STATIC,   SINGULAR, UINT32,   read_after_timestamp,   3)
#define cr_ParameterRead_CALLBACK NULL
#define cr_ParameterRead_DEFAULT NULL

#define cr_ParameterReadResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   read_timestamp,    1) \
X(a, STATIC,   REPEATED, MESSAGE,  values,            3)
#define cr_ParameterReadResponse_CALLBACK NULL
#define cr_ParameterReadResponse_DEFAULT NULL
#define cr_ParameterReadResponse_values_MSGTYPE cr_ParameterValue

#define cr_ParameterWrite_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  values,            3)
#define cr_ParameterWrite_CALLBACK NULL
#define cr_ParameterWrite_DEFAULT NULL
#define cr_ParameterWrite_values_MSGTYPE cr_ParameterValue

#define cr_ParameterWriteResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    result,            1) \
X(a, STATIC,   OPTIONAL, STRING,   result_message,    2)
#define cr_ParameterWriteResponse_CALLBACK NULL
#define cr_ParameterWriteResponse_DEFAULT NULL

#define cr_ParameterNotifyConfig_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   parameter_id,      1) \
X(a, STATIC,   SINGULAR, UINT32,   minimum_notification_period,   2) \
X(a, STATIC,   SINGULAR, UINT32,   maximum_notification_period,   3) \
X(a, STATIC,   SINGULAR, FLOAT,    minimum_delta,     4)
#define cr_ParameterNotifyConfig_CALLBACK NULL
#define cr_ParameterNotifyConfig_DEFAULT NULL

#define cr_ParameterEnableNotifications_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  configs,           1) \
X(a, STATIC,   SINGULAR, BOOL,     disable_all_first,   2)
#define cr_ParameterEnableNotifications_CALLBACK NULL
#define cr_ParameterEnableNotifications_DEFAULT NULL
#define cr_ParameterEnableNotifications_configs_MSGTYPE cr_ParameterNotifyConfig

#define cr_ParameterDisableNotifications_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, UINT32,   pids,              1)
#define cr_ParameterDisableNotifications_CALLBACK NULL
#define cr_ParameterDisableNotifications_DEFAULT NULL

#define cr_ParameterNotifyConfigResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    result,            1) \
X(a, STATIC,   OPTIONAL, STRING,   result_message,    2)
#define cr_ParameterNotifyConfigResponse_CALLBACK NULL
#define cr_ParameterNotifyConfigResponse_DEFAULT NULL

#define cr_DiscoverParameterNotifications_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, UINT32,   parameter_ids,     1)
#define cr_DiscoverParameterNotifications_CALLBACK NULL
#define cr_DiscoverParameterNotifications_DEFAULT NULL

#define cr_DiscoverParameterNotificationsResponse_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  configs,           1)
#define cr_DiscoverParameterNotificationsResponse_CALLBACK NULL
#define cr_DiscoverParameterNotificationsResponse_DEFAULT NULL
#define cr_DiscoverParameterNotificationsResponse_configs_MSGTYPE cr_ParameterNotifyConfig

#define cr_ParameterNotification_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  values,            2)
#define cr_ParameterNotification_CALLBACK NULL
#define cr_ParameterNotification_DEFAULT NULL
#define cr_ParameterNotification_values_MSGTYPE cr_ParameterValue

#define cr_ParameterValue_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   parameter_id,      1) \
X(a, STATIC,   SINGULAR, UINT32,   timestamp,         2) \
X(a, STATIC,   ONEOF,    UINT32,   (value,uint32_value,value.uint32_value),   3) \
X(a, STATIC,   ONEOF,    SINT32,   (value,sint32_value,value.sint32_value),   4) \
X(a, STATIC,   ONEOF,    FLOAT,    (value,float32_value,value.float32_value),   5) \
X(a, STATIC,   ONEOF,    UINT64,   (value,uint64_value,value.uint64_value),   6) \
X(a, STATIC,   ONEOF,    SINT64,   (value,sint64_value,value.sint64_value),   7) \
X(a, STATIC,   ONEOF,    DOUBLE,   (value,float64_value,value.float64_value),   8) \
X(a, STATIC,   ONEOF,    BOOL,     (value,bool_value,value.bool_value),   9) \
X(a, STATIC,   ONEOF,    STRING,   (value,string_value,value.string_value),  10) \
X(a, STATIC,   ONEOF,    UINT32,   (value,enum_value,value.enum_value),  11) \
X(a, STATIC,   ONEOF,    UINT32,   (value,bitfield_value,value.bitfield_value),  12) \
X(a, STATIC,   ONEOF,    BYTES,    (value,bytes_value,value.bytes_value),  13)
#define cr_ParameterValue_CALLBACK NULL
#define cr_ParameterValue_DEFAULT NULL

#define cr_DiscoverFiles_FIELDLIST(X, a) \

#define cr_DiscoverFiles_CALLBACK NULL
#define cr_DiscoverFiles_DEFAULT NULL

#define cr_DiscoverFilesResponse_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  file_infos,        1)
#define cr_DiscoverFilesResponse_CALLBACK NULL
#define cr_DiscoverFilesResponse_DEFAULT NULL
#define cr_DiscoverFilesResponse_file_infos_MSGTYPE cr_FileInfo

#define cr_FileInfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   file_id,           1) \
X(a, STATIC,   SINGULAR, STRING,   file_name,         2) \
X(a, STATIC,   SINGULAR, UENUM,    access,            3) \
X(a, STATIC,   SINGULAR, INT32,    current_size_bytes,   4) \
X(a, STATIC,   SINGULAR, UENUM,    storage_location,   5) \
X(a, STATIC,   SINGULAR, BOOL,     require_checksum,   6) \
X(a, STATIC,   SINGULAR, UINT32,   maximum_size_bytes,   7)
#define cr_FileInfo_CALLBACK NULL
#define cr_FileInfo_DEFAULT NULL

#define cr_FileTransferRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   file_id,           1) \
X(a, STATIC,   SINGULAR, UINT32,   read_write,        2) \
X(a, STATIC,   SINGULAR, UINT32,   request_offset,    3) \
X(a, STATIC,   SINGULAR, UINT32,   transfer_length,   4) \
X(a, STATIC,   SINGULAR, UINT32,   transfer_id,       5) \
X(a, STATIC,   SINGULAR, UINT32,   messages_per_ack,   6) \
X(a, STATIC,   SINGULAR, UINT32,   timeout_in_ms,     7) \
X(a, STATIC,   OPTIONAL, UINT32,   requested_ack_rate,   8) \
X(a, STATIC,   SINGULAR, BOOL,     require_checksum,   9)
#define cr_FileTransferRequest_CALLBACK NULL
#define cr_FileTransferRequest_DEFAULT NULL

#define cr_FileTransferResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    result,            1) \
X(a, STATIC,   SINGULAR, UINT32,   transfer_id,       2) \
X(a, STATIC,   SINGULAR, UINT32,   ack_rate,          3) \
X(a, STATIC,   OPTIONAL, STRING,   result_message,    4)
#define cr_FileTransferResponse_CALLBACK NULL
#define cr_FileTransferResponse_DEFAULT NULL

#define cr_FileTransferData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    result,            1) \
X(a, STATIC,   SINGULAR, UINT32,   transfer_id,       2) \
X(a, STATIC,   SINGULAR, UINT32,   message_number,    3) \
X(a, STATIC,   SINGULAR, BYTES,    message_data,      4) \
X(a, STATIC,   OPTIONAL, INT32,    checksum,          5)
#define cr_FileTransferData_CALLBACK NULL
#define cr_FileTransferData_DEFAULT NULL

#define cr_FileTransferDataNotification_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    result,            1) \
X(a, STATIC,   OPTIONAL, STRING,   result_message,    2) \
X(a, STATIC,   SINGULAR, BOOL,     is_complete,       3) \
X(a, STATIC,   SINGULAR, UINT32,   transfer_id,       4) \
X(a, STATIC,   SINGULAR, UINT32,   retry_offset,      5)
#define cr_FileTransferDataNotification_CALLBACK NULL
#define cr_FileTransferDataNotification_DEFAULT NULL

#define cr_FileEraseRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   file_id,           1)
#define cr_FileEraseRequest_CALLBACK NULL
#define cr_FileEraseRequest_DEFAULT NULL

#define cr_FileEraseResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   file_id,           1) \
X(a, STATIC,   SINGULAR, INT32,    result,            2) \
X(a, STATIC,   OPTIONAL, STRING,   result_message,    3)
#define cr_FileEraseResponse_CALLBACK NULL
#define cr_FileEraseResponse_DEFAULT NULL

#define cr_DiscoverStreams_FIELDLIST(X, a) \

#define cr_DiscoverStreams_CALLBACK NULL
#define cr_DiscoverStreams_DEFAULT NULL

#define cr_DiscoverStreamsResponse_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  streams,           1)
#define cr_DiscoverStreamsResponse_CALLBACK NULL
#define cr_DiscoverStreamsResponse_DEFAULT NULL
#define cr_DiscoverStreamsResponse_streams_MSGTYPE cr_StreamInfo

#define cr_StreamInfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    stream_id,         1) \
X(a, STATIC,   SINGULAR, UENUM,    access,            2) \
X(a, STATIC,   SINGULAR, STRING,   name,              3) \
X(a, STATIC,   SINGULAR, INT32,    max_bytes_per_message,   4)
#define cr_StreamInfo_CALLBACK NULL
#define cr_StreamInfo_DEFAULT NULL

#define cr_StreamOpen_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    stream_id,         1) \
X(a, STATIC,   SINGULAR, UENUM,    access,            2)
#define cr_StreamOpen_CALLBACK NULL
#define cr_StreamOpen_DEFAULT NULL

#define cr_StreamOpenResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    stream_id,         1) \
X(a, STATIC,   SINGULAR, INT32,    result,            2) \
X(a, STATIC,   OPTIONAL, STRING,   result_message,    3)
#define cr_StreamOpenResponse_CALLBACK NULL
#define cr_StreamOpenResponse_DEFAULT NULL

#define cr_StreamClose_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    stream_id,         1)
#define cr_StreamClose_CALLBACK NULL
#define cr_StreamClose_DEFAULT NULL

#define cr_StreamData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    stream_id,         1) \
X(a, STATIC,   SINGULAR, UINT32,   roll_count,        2) \
X(a, STATIC,   SINGULAR, BYTES,    message_data,      3) \
X(a, STATIC,   SINGULAR, INT32,    checksum,          4)
#define cr_StreamData_CALLBACK NULL
#define cr_StreamData_DEFAULT NULL

#define cr_DiscoverCommands_FIELDLIST(X, a) \

#define cr_DiscoverCommands_CALLBACK NULL
#define cr_DiscoverCommands_DEFAULT NULL

#define cr_DiscoverCommandsResponse_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  available_commands,   1)
#define cr_DiscoverCommandsResponse_CALLBACK NULL
#define cr_DiscoverCommandsResponse_DEFAULT NULL
#define cr_DiscoverCommandsResponse_available_commands_MSGTYPE cr_CommandInfo

#define cr_CommandInfo_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   SINGULAR, STRING,   name,              2) \
X(a, STATIC,   OPTIONAL, STRING,   description,       3) \
X(a, STATIC,   OPTIONAL, UINT32,   timeout,           4)
#define cr_CommandInfo_CALLBACK NULL
#define cr_CommandInfo_DEFAULT NULL

#define cr_SendCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   command_id,        1)
#define cr_SendCommand_CALLBACK NULL
#define cr_SendCommand_DEFAULT NULL

#define cr_SendCommandResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    result,            1) \
X(a, STATIC,   OPTIONAL, STRING,   result_message,    2)
#define cr_SendCommandResponse_CALLBACK NULL
#define cr_SendCommandResponse_DEFAULT NULL

#define cr_CLIData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   message_data,      1)
#define cr_CLIData_CALLBACK NULL
#define cr_CLIData_DEFAULT NULL

#define cr_TimeSetRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    seconds_utc,       1) \
X(a, STATIC,   OPTIONAL, INT32,    timezone,          2)
#define cr_TimeSetRequest_CALLBACK NULL
#define cr_TimeSetRequest_DEFAULT NULL

#define cr_TimeSetResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    result,            1) \
X(a, STATIC,   OPTIONAL, STRING,   result_message,    2)
#define cr_TimeSetResponse_CALLBACK NULL
#define cr_TimeSetResponse_DEFAULT NULL

#define cr_TimeGetRequest_FIELDLIST(X, a) \

#define cr_TimeGetRequest_CALLBACK NULL
#define cr_TimeGetRequest_DEFAULT NULL

#define cr_TimeGetResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    result,            1) \
X(a, STATIC,   OPTIONAL, STRING,   result_message,    2) \
X(a, STATIC,   SINGULAR, INT64,    seconds_utc,       3) \
X(a, STATIC,   OPTIONAL, INT32,    timezone,          4)
#define cr_TimeGetResponse_CALLBACK NULL
#define cr_TimeGetResponse_DEFAULT NULL

#define cr_ConnectionDescription_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   ssid,              1) \
X(a, STATIC,   OPTIONAL, INT32,    signal_strength,   2) \
X(a, STATIC,   OPTIONAL, UENUM,    sec,               3) \
X(a, STATIC,   OPTIONAL, UENUM,    band,              4)
#define cr_ConnectionDescription_CALLBACK NULL
#define cr_ConnectionDescription_DEFAULT NULL

#define cr_DiscoverWiFiRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    state,             2)
#define cr_DiscoverWiFiRequest_CALLBACK NULL
#define cr_DiscoverWiFiRequest_DEFAULT NULL

#define cr_DiscoverWiFiResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    result,            1) \
X(a, STATIC,   OPTIONAL, STRING,   result_message,    2) \
X(a, STATIC,   SINGULAR, INT32,    available_AP,      3) \
X(a, STATIC,   SINGULAR, UENUM,    state,             4) \
X(a, STATIC,   SINGULAR, UINT32,   connectionId,      5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  cd,                6)
#define cr_DiscoverWiFiResponse_CALLBACK NULL
#define cr_DiscoverWiFiResponse_DEFAULT NULL
#define cr_DiscoverWiFiResponse_cd_MSGTYPE cr_ConnectionDescription

#define cr_WiFiConnectionRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    action,            1) \
X(a, STATIC,   OPTIONAL, STRING,   password,          2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  cd,                3) \
X(a, STATIC,   OPTIONAL, BOOL,     autoconnect,       4)
#define cr_WiFiConnectionRequest_CALLBACK NULL
#define cr_WiFiConnectionRequest_DEFAULT NULL
#define cr_WiFiConnectionRequest_cd_MSGTYPE cr_ConnectionDescription

#define cr_WiFiConnectionResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    result,            1) \
X(a, STATIC,   OPTIONAL, INT32,    signal_strength,   2) \
X(a, STATIC,   OPTIONAL, STRING,   result_message,    3)
#define cr_WiFiConnectionResponse_CALLBACK NULL
#define cr_WiFiConnectionResponse_DEFAULT NULL

#define cr_BufferSizes_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   max_message_size,   1) \
X(a, STATIC,   SINGULAR, UINT32,   big_data_buffer_size,   2) \
X(a, STATIC,   SINGULAR, UINT32,   parameter_buffer_count,   3) \
X(a, STATIC,   SINGULAR, UINT32,   num_params_in_response,   4) \
X(a, STATIC,   SINGULAR, UINT32,   num_descriptors_in_response,   5) \
X(a, STATIC,   SINGULAR, UINT32,   description_len,   6) \
X(a, STATIC,   SINGULAR, UINT32,   max_param_bytes,   7) \
X(a, STATIC,   SINGULAR, UINT32,   medium_string_len,   8) \
X(a, STATIC,   SINGULAR, UINT32,   short_string_len,   9) \
X(a, STATIC,   SINGULAR, UINT32,   param_info_description_len,  10) \
X(a, STATIC,   SINGULAR, UINT32,   num_param_notifications,  11) \
X(a, STATIC,   SINGULAR, UINT32,   num_commands_in_response,  13) \
X(a, STATIC,   SINGULAR, UINT32,   count_param_desc_in_response,  14) \
X(a, STATIC,   SINGULAR, UINT32,   param_notify_config_count,  15)
#define cr_BufferSizes_CALLBACK NULL
#define cr_BufferSizes_DEFAULT NULL

extern const pb_msgdesc_t cr_ReachMessageHeader_msg;
extern const pb_msgdesc_t cr_ReachMessage_msg;
extern const pb_msgdesc_t cr_AhsokaMessageHeader_msg;
extern const pb_msgdesc_t cr_ErrorReport_msg;
extern const pb_msgdesc_t cr_PingRequest_msg;
extern const pb_msgdesc_t cr_PingResponse_msg;
extern const pb_msgdesc_t cr_DeviceInfoRequest_msg;
extern const pb_msgdesc_t cr_DeviceInfoResponse_msg;
extern const pb_msgdesc_t cr_ParameterInfoRequest_msg;
extern const pb_msgdesc_t cr_ParameterInfoResponse_msg;
extern const pb_msgdesc_t cr_ParameterInfo_msg;
extern const pb_msgdesc_t cr_ParamExKey_msg;
extern const pb_msgdesc_t cr_ParamExInfoResponse_msg;
extern const pb_msgdesc_t cr_ParameterRead_msg;
extern const pb_msgdesc_t cr_ParameterReadResponse_msg;
extern const pb_msgdesc_t cr_ParameterWrite_msg;
extern const pb_msgdesc_t cr_ParameterWriteResponse_msg;
extern const pb_msgdesc_t cr_ParameterNotifyConfig_msg;
extern const pb_msgdesc_t cr_ParameterEnableNotifications_msg;
extern const pb_msgdesc_t cr_ParameterDisableNotifications_msg;
extern const pb_msgdesc_t cr_ParameterNotifyConfigResponse_msg;
extern const pb_msgdesc_t cr_DiscoverParameterNotifications_msg;
extern const pb_msgdesc_t cr_DiscoverParameterNotificationsResponse_msg;
extern const pb_msgdesc_t cr_ParameterNotification_msg;
extern const pb_msgdesc_t cr_ParameterValue_msg;
extern const pb_msgdesc_t cr_DiscoverFiles_msg;
extern const pb_msgdesc_t cr_DiscoverFilesResponse_msg;
extern const pb_msgdesc_t cr_FileInfo_msg;
extern const pb_msgdesc_t cr_FileTransferRequest_msg;
extern const pb_msgdesc_t cr_FileTransferResponse_msg;
extern const pb_msgdesc_t cr_FileTransferData_msg;
extern const pb_msgdesc_t cr_FileTransferDataNotification_msg;
extern const pb_msgdesc_t cr_FileEraseRequest_msg;
extern const pb_msgdesc_t cr_FileEraseResponse_msg;
extern const pb_msgdesc_t cr_DiscoverStreams_msg;
extern const pb_msgdesc_t cr_DiscoverStreamsResponse_msg;
extern const pb_msgdesc_t cr_StreamInfo_msg;
extern const pb_msgdesc_t cr_StreamOpen_msg;
extern const pb_msgdesc_t cr_StreamOpenResponse_msg;
extern const pb_msgdesc_t cr_StreamClose_msg;
extern const pb_msgdesc_t cr_StreamData_msg;
extern const pb_msgdesc_t cr_DiscoverCommands_msg;
extern const pb_msgdesc_t cr_DiscoverCommandsResponse_msg;
extern const pb_msgdesc_t cr_CommandInfo_msg;
extern const pb_msgdesc_t cr_SendCommand_msg;
extern const pb_msgdesc_t cr_SendCommandResponse_msg;
extern const pb_msgdesc_t cr_CLIData_msg;
extern const pb_msgdesc_t cr_TimeSetRequest_msg;
extern const pb_msgdesc_t cr_TimeSetResponse_msg;
extern const pb_msgdesc_t cr_TimeGetRequest_msg;
extern const pb_msgdesc_t cr_TimeGetResponse_msg;
extern const pb_msgdesc_t cr_ConnectionDescription_msg;
extern const pb_msgdesc_t cr_DiscoverWiFiRequest_msg;
extern const pb_msgdesc_t cr_DiscoverWiFiResponse_msg;
extern const pb_msgdesc_t cr_WiFiConnectionRequest_msg;
extern const pb_msgdesc_t cr_WiFiConnectionResponse_msg;
extern const pb_msgdesc_t cr_BufferSizes_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define cr_ReachMessageHeader_fields &cr_ReachMessageHeader_msg
#define cr_ReachMessage_fields &cr_ReachMessage_msg
#define cr_AhsokaMessageHeader_fields &cr_AhsokaMessageHeader_msg
#define cr_ErrorReport_fields &cr_ErrorReport_msg
#define cr_PingRequest_fields &cr_PingRequest_msg
#define cr_PingResponse_fields &cr_PingResponse_msg
#define cr_DeviceInfoRequest_fields &cr_DeviceInfoRequest_msg
#define cr_DeviceInfoResponse_fields &cr_DeviceInfoResponse_msg
#define cr_ParameterInfoRequest_fields &cr_ParameterInfoRequest_msg
#define cr_ParameterInfoResponse_fields &cr_ParameterInfoResponse_msg
#define cr_ParameterInfo_fields &cr_ParameterInfo_msg
#define cr_ParamExKey_fields &cr_ParamExKey_msg
#define cr_ParamExInfoResponse_fields &cr_ParamExInfoResponse_msg
#define cr_ParameterRead_fields &cr_ParameterRead_msg
#define cr_ParameterReadResponse_fields &cr_ParameterReadResponse_msg
#define cr_ParameterWrite_fields &cr_ParameterWrite_msg
#define cr_ParameterWriteResponse_fields &cr_ParameterWriteResponse_msg
#define cr_ParameterNotifyConfig_fields &cr_ParameterNotifyConfig_msg
#define cr_ParameterEnableNotifications_fields &cr_ParameterEnableNotifications_msg
#define cr_ParameterDisableNotifications_fields &cr_ParameterDisableNotifications_msg
#define cr_ParameterNotifyConfigResponse_fields &cr_ParameterNotifyConfigResponse_msg
#define cr_DiscoverParameterNotifications_fields &cr_DiscoverParameterNotifications_msg
#define cr_DiscoverParameterNotificationsResponse_fields &cr_DiscoverParameterNotificationsResponse_msg
#define cr_ParameterNotification_fields &cr_ParameterNotification_msg
#define cr_ParameterValue_fields &cr_ParameterValue_msg
#define cr_DiscoverFiles_fields &cr_DiscoverFiles_msg
#define cr_DiscoverFilesResponse_fields &cr_DiscoverFilesResponse_msg
#define cr_FileInfo_fields &cr_FileInfo_msg
#define cr_FileTransferRequest_fields &cr_FileTransferRequest_msg
#define cr_FileTransferResponse_fields &cr_FileTransferResponse_msg
#define cr_FileTransferData_fields &cr_FileTransferData_msg
#define cr_FileTransferDataNotification_fields &cr_FileTransferDataNotification_msg
#define cr_FileEraseRequest_fields &cr_FileEraseRequest_msg
#define cr_FileEraseResponse_fields &cr_FileEraseResponse_msg
#define cr_DiscoverStreams_fields &cr_DiscoverStreams_msg
#define cr_DiscoverStreamsResponse_fields &cr_DiscoverStreamsResponse_msg
#define cr_StreamInfo_fields &cr_StreamInfo_msg
#define cr_StreamOpen_fields &cr_StreamOpen_msg
#define cr_StreamOpenResponse_fields &cr_StreamOpenResponse_msg
#define cr_StreamClose_fields &cr_StreamClose_msg
#define cr_StreamData_fields &cr_StreamData_msg
#define cr_DiscoverCommands_fields &cr_DiscoverCommands_msg
#define cr_DiscoverCommandsResponse_fields &cr_DiscoverCommandsResponse_msg
#define cr_CommandInfo_fields &cr_CommandInfo_msg
#define cr_SendCommand_fields &cr_SendCommand_msg
#define cr_SendCommandResponse_fields &cr_SendCommandResponse_msg
#define cr_CLIData_fields &cr_CLIData_msg
#define cr_TimeSetRequest_fields &cr_TimeSetRequest_msg
#define cr_TimeSetResponse_fields &cr_TimeSetResponse_msg
#define cr_TimeGetRequest_fields &cr_TimeGetRequest_msg
#define cr_TimeGetResponse_fields &cr_TimeGetResponse_msg
#define cr_ConnectionDescription_fields &cr_ConnectionDescription_msg
#define cr_DiscoverWiFiRequest_fields &cr_DiscoverWiFiRequest_msg
#define cr_DiscoverWiFiResponse_fields &cr_DiscoverWiFiResponse_msg
#define cr_WiFiConnectionRequest_fields &cr_WiFiConnectionRequest_msg
#define cr_WiFiConnectionResponse_fields &cr_WiFiConnectionResponse_msg
#define cr_BufferSizes_fields &cr_BufferSizes_msg

/* Maximum encoded size of messages (where known) */
#define cr_AhsokaMessageHeader_size              47
#define cr_BufferSizes_size                      84
#define cr_CLIData_size                          196
#define cr_CommandInfo_size                      86
#define cr_ConnectionDescription_size            48
#define cr_DeviceInfoRequest_size                50
#define cr_DeviceInfoResponse_size               199
#define cr_DiscoverCommandsResponse_size         176
#define cr_DiscoverCommands_size                 0
#define cr_DiscoverFilesResponse_size            224
#define cr_DiscoverFiles_size                    0
#define cr_DiscoverParameterNotificationsResponse_size 200
#define cr_DiscoverParameterNotifications_size   192
#define cr_DiscoverStreamsResponse_size          204
#define cr_DiscoverStreams_size                  0
#define cr_DiscoverWiFiRequest_size              2
#define cr_DiscoverWiFiResponse_size             129
#define cr_ErrorReport_size                      207
#define cr_FileEraseRequest_size                 6
#define cr_FileEraseResponse_size                213
#define cr_FileInfo_size                         54
#define cr_FileTransferDataNotification_size     221
#define cr_FileTransferData_size                 231
#define cr_FileTransferRequest_size              50
#define cr_FileTransferResponse_size             219
#define cr_ParamExInfoResponse_size              214
#define cr_ParamExKey_size                       23
#define cr_ParameterDisableNotifications_size    192
#define cr_ParameterEnableNotifications_size     202
#define cr_ParameterInfoRequest_size             192
#define cr_ParameterInfoResponse_size            244
#define cr_ParameterInfo_size                    120
#define cr_ParameterNotification_size            192
#define cr_ParameterNotifyConfigResponse_size    207
#define cr_ParameterNotifyConfig_size            23
#define cr_ParameterReadResponse_size            198
#define cr_ParameterRead_size                    198
#define cr_ParameterValue_size                   46
#define cr_ParameterWriteResponse_size           207
#define cr_ParameterWrite_size                   192
#define cr_PingRequest_size                      197
#define cr_PingResponse_size                     208
#define cr_ReachMessageHeader_size               30
#define cr_ReachMessage_size                     243
#define cr_SendCommandResponse_size              207
#define cr_SendCommand_size                      6
#define cr_StreamClose_size                      11
#define cr_StreamData_size                       225
#define cr_StreamInfo_size                       49
#define cr_StreamOpenResponse_size               218
#define cr_StreamOpen_size                       13
#define cr_TimeGetRequest_size                   0
#define cr_TimeGetResponse_size                  229
#define cr_TimeSetRequest_size                   22
#define cr_TimeSetResponse_size                  207
#define cr_WiFiConnectionRequest_size            87
#define cr_WiFiConnectionResponse_size           218

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
